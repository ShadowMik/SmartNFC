
c:/Users/Tobias/Documents/Particle_IO/SmartNFC/IoT_Exam_Project/target/4.0.0/argon/IoT_Exam_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000023f4  000b401c  000b401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000b6410  000b6410  00006410  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000b6434  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000078  2003e5e8  000b6438  0001e5e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000190  2003e660  2003e660  0002e660  2**2
                  ALLOC
  7 .module_info_suffix 00000028  000b64b0  000b64b0  000264b0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000b64d8  000b64d8  000264d8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   001153c8  00000000  00000000  000264dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 000129ee  00000000  00000000  0013b8a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    0003a653  00000000  00000000  0014e292  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002b08  00000000  00000000  001888e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 0000a460  00000000  00000000  0018b3ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003859d  00000000  00000000  0019584d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0003dc3b  00000000  00000000  001cddea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00135401  00000000  00000000  0020ba25  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  000079bc  00000000  00000000  00340e28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b401c:	4809      	ldr	r0, [pc, #36]	; (b4044 <module_user_pre_init+0x28>)
   b401e:	490a      	ldr	r1, [pc, #40]	; (b4048 <module_user_pre_init+0x2c>)
   b4020:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4022:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4024:	d005      	beq.n	b4032 <module_user_pre_init+0x16>
   b4026:	4a09      	ldr	r2, [pc, #36]	; (b404c <module_user_pre_init+0x30>)
   b4028:	4282      	cmp	r2, r0
   b402a:	d002      	beq.n	b4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b402c:	1a12      	subs	r2, r2, r0
   b402e:	f001 ff32 	bl	b5e96 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4032:	4807      	ldr	r0, [pc, #28]	; (b4050 <module_user_pre_init+0x34>)
   b4034:	4a07      	ldr	r2, [pc, #28]	; (b4054 <module_user_pre_init+0x38>)
   b4036:	2100      	movs	r1, #0
   b4038:	1a12      	subs	r2, r2, r0
   b403a:	f001 ff3a 	bl	b5eb2 <memset>
    return &link_global_data_start;
}
   b403e:	4801      	ldr	r0, [pc, #4]	; (b4044 <module_user_pre_init+0x28>)
   b4040:	bd08      	pop	{r3, pc}
   b4042:	bf00      	nop
   b4044:	2003e5e8 	.word	0x2003e5e8
   b4048:	000b6438 	.word	0x000b6438
   b404c:	2003e660 	.word	0x2003e660
   b4050:	2003e660 	.word	0x2003e660
   b4054:	2003e7ed 	.word	0x2003e7ed

000b4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405a:	4e07      	ldr	r6, [pc, #28]	; (b4078 <module_user_init+0x20>)
   b405c:	4c07      	ldr	r4, [pc, #28]	; (b407c <module_user_init+0x24>)
    module_user_init_hook();
   b405e:	f001 f8dd 	bl	b521c <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4062:	1ba4      	subs	r4, r4, r6
   b4064:	08a4      	lsrs	r4, r4, #2
   b4066:	2500      	movs	r5, #0
   b4068:	42ac      	cmp	r4, r5
   b406a:	d100      	bne.n	b406e <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b406c:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b406e:	f856 3b04 	ldr.w	r3, [r6], #4
   b4072:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4074:	3501      	adds	r5, #1
   b4076:	e7f7      	b.n	b4068 <module_user_init+0x10>
   b4078:	000b63e8 	.word	0x000b63e8
   b407c:	000b640c 	.word	0x000b640c

000b4080 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4080:	f000 b816 	b.w	b40b0 <setup>

000b4084 <module_user_loop>:
}

void module_user_loop() {
   b4084:	b508      	push	{r3, lr}
    loop();
   b4086:	f000 f8bb 	bl	b4200 <loop>
    _post_loop();
}
   b408a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b408e:	f001 b87d 	b.w	b518c <_post_loop>

000b4092 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b4092:	f000 bdc1 	b.w	b4c18 <malloc>

000b4096 <_Znaj>:
   b4096:	f000 bdbf 	b.w	b4c18 <malloc>

000b409a <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b409a:	f000 bdc5 	b.w	b4c28 <free>

000b409e <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b409e:	7800      	ldrb	r0, [r0, #0]
   b40a0:	fab0 f080 	clz	r0, r0
   b40a4:	0940      	lsrs	r0, r0, #5
   b40a6:	4770      	bx	lr

000b40a8 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40a8:	2301      	movs	r3, #1
   b40aa:	7003      	strb	r3, [r0, #0]
   b40ac:	4770      	bx	lr
	...

000b40b0 <setup>:

void showState();

void lockUnlock();

void setup() {
   b40b0:	b5f0      	push	{r4, r5, r6, r7, lr}
   b40b2:	b089      	sub	sp, #36	; 0x24

    Serial.begin(115200);
   b40b4:	f001 fc58 	bl	b5968 <_Z16_fetch_usbserialv>
   b40b8:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
   b40bc:	f001 fc42 	bl	b5944 <_ZN9USBSerial5beginEl>

    while(!Serial){
   b40c0:	f001 fc52 	bl	b5968 <_Z16_fetch_usbserialv>
   b40c4:	f001 fc45 	bl	b5952 <_ZN9USBSerialcvbEv>
   b40c8:	b918      	cbnz	r0, b40d2 <setup+0x22>
        delay(10);
   b40ca:	200a      	movs	r0, #10
   b40cc:	f001 f832 	bl	b5134 <delay>
    while(!Serial){
   b40d0:	e7f6      	b.n	b40c0 <setup+0x10>
    }

    nfc.begin();
   b40d2:	4836      	ldr	r0, [pc, #216]	; (b41ac <setup+0xfc>)

    uint32_t versiondata;

    do {
        versiondata = nfc.getFirmwareVersion();
   b40d4:	4e35      	ldr	r6, [pc, #212]	; (b41ac <setup+0xfc>)
        if (!versiondata) {
            // tast "particle serial monitor " i CLI
            Serial.println("no board");
   b40d6:	4d36      	ldr	r5, [pc, #216]	; (b41b0 <setup+0x100>)
   b40d8:	4f36      	ldr	r7, [pc, #216]	; (b41b4 <setup+0x104>)
    nfc.begin();
   b40da:	f000 fb69 	bl	b47b0 <_ZN14Adafruit_PN5325beginEv>
        versiondata = nfc.getFirmwareVersion();
   b40de:	4630      	mov	r0, r6
   b40e0:	f000 fae4 	bl	b46ac <_ZN14Adafruit_PN53218getFirmwareVersionEv>
        if (!versiondata) {
   b40e4:	4604      	mov	r4, r0
   b40e6:	bb58      	cbnz	r0, b4140 <setup+0x90>
            Serial.println("no board");
   b40e8:	f001 fc3e 	bl	b5968 <_Z16_fetch_usbserialv>
   b40ec:	4629      	mov	r1, r5
   b40ee:	f000 ffe6 	bl	b50be <_ZN5Print7printlnEPKc>
            DEBUG_PRINT("no board");
   b40f2:	4629      	mov	r1, r5
   b40f4:	a804      	add	r0, sp, #16
   b40f6:	f000 ff3f 	bl	b4f78 <_ZN6String6formatEPKcz>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   b40fa:	783b      	ldrb	r3, [r7, #0]
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b40fc:	f88d 3000 	strb.w	r3, [sp]
   b4100:	9a04      	ldr	r2, [sp, #16]
   b4102:	492d      	ldr	r1, [pc, #180]	; (b41b8 <setup+0x108>)
   b4104:	233c      	movs	r3, #60	; 0x3c
   b4106:	a802      	add	r0, sp, #8
   b4108:	f001 f9e6 	bl	b54d8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   b410c:	9c03      	ldr	r4, [sp, #12]
   b410e:	b17c      	cbz	r4, b4130 <setup+0x80>
      if (--_M_use_count == 0)
   b4110:	6863      	ldr	r3, [r4, #4]
   b4112:	3b01      	subs	r3, #1
   b4114:	6063      	str	r3, [r4, #4]
   b4116:	b95b      	cbnz	r3, b4130 <setup+0x80>
          _M_dispose();
   b4118:	6823      	ldr	r3, [r4, #0]
   b411a:	4620      	mov	r0, r4
   b411c:	689b      	ldr	r3, [r3, #8]
   b411e:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b4120:	68a3      	ldr	r3, [r4, #8]
   b4122:	3b01      	subs	r3, #1
   b4124:	60a3      	str	r3, [r4, #8]
   b4126:	b91b      	cbnz	r3, b4130 <setup+0x80>
            _M_destroy();
   b4128:	6823      	ldr	r3, [r4, #0]
   b412a:	4620      	mov	r0, r4
   b412c:	68db      	ldr	r3, [r3, #12]
   b412e:	4798      	blx	r3
   b4130:	a804      	add	r0, sp, #16
   b4132:	f000 fec1 	bl	b4eb8 <_ZN6StringD1Ev>
            delay(1000);
   b4136:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   b413a:	f000 fffb 	bl	b5134 <delay>
        }
    }
    while (!versiondata);
   b413e:	e7ce      	b.n	b40de <setup+0x2e>
    
    Serial.print("Found chip PN5"); 
   b4140:	f001 fc12 	bl	b5968 <_Z16_fetch_usbserialv>
   b4144:	491d      	ldr	r1, [pc, #116]	; (b41bc <setup+0x10c>)
   b4146:	f000 ffa7 	bl	b5098 <_ZN5Print5printEPKc>
    Serial.println((versiondata>>24) & 0xFF, HEX); 
   b414a:	f001 fc0d 	bl	b5968 <_Z16_fetch_usbserialv>
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b414e:	2210      	movs	r2, #16
   b4150:	0e21      	lsrs	r1, r4, #24
   b4152:	4605      	mov	r5, r0
   b4154:	f000 ffbd 	bl	b50d2 <_ZN5Print11printNumberEmh>
        n += println();
   b4158:	4628      	mov	r0, r5
   b415a:	f000 ffa4 	bl	b50a6 <_ZN5Print7printlnEv>
    Serial.print("Firmware ver. "); 
   b415e:	f001 fc03 	bl	b5968 <_Z16_fetch_usbserialv>
   b4162:	4917      	ldr	r1, [pc, #92]	; (b41c0 <setup+0x110>)
   b4164:	f000 ff98 	bl	b5098 <_ZN5Print5printEPKc>
    Serial.print((versiondata>>16) & 0xFF, DEC); 
   b4168:	f001 fbfe 	bl	b5968 <_Z16_fetch_usbserialv>
        return printNumber(val, base) + t;
   b416c:	220a      	movs	r2, #10
   b416e:	f3c4 4107 	ubfx	r1, r4, #16, #8
   b4172:	f000 ffae 	bl	b50d2 <_ZN5Print11printNumberEmh>
    Serial.print('.'); 
   b4176:	f001 fbf7 	bl	b5968 <_Z16_fetch_usbserialv>
   b417a:	212e      	movs	r1, #46	; 0x2e
   b417c:	f000 ff90 	bl	b50a0 <_ZN5Print5printEc>
    Serial.println((versiondata>>8) & 0xFF, DEC);
   b4180:	f001 fbf2 	bl	b5968 <_Z16_fetch_usbserialv>
   b4184:	f3c4 2107 	ubfx	r1, r4, #8, #8
   b4188:	220a      	movs	r2, #10
   b418a:	4605      	mov	r5, r0
   b418c:	f000 ffa1 	bl	b50d2 <_ZN5Print11printNumberEmh>
        n += println();
   b4190:	4628      	mov	r0, r5
   b4192:	f000 ff88 	bl	b50a6 <_ZN5Print7printlnEv>
    
    // configure board to read RFID tags
    nfc.SAMConfig();
   b4196:	4805      	ldr	r0, [pc, #20]	; (b41ac <setup+0xfc>)
   b4198:	f000 fab6 	bl	b4708 <_ZN14Adafruit_PN5329SAMConfigEv>
  
    Serial.println("Waiting for an ISO14443A Card ...");
   b419c:	f001 fbe4 	bl	b5968 <_Z16_fetch_usbserialv>
   b41a0:	4908      	ldr	r1, [pc, #32]	; (b41c4 <setup+0x114>)
}
   b41a2:	b009      	add	sp, #36	; 0x24
   b41a4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    Serial.println("Waiting for an ISO14443A Card ...");
   b41a8:	f000 bf89 	b.w	b50be <_ZN5Print7printlnEPKc>
   b41ac:	2003e661 	.word	0x2003e661
   b41b0:	000b6074 	.word	0x000b6074
   b41b4:	2003e660 	.word	0x2003e660
   b41b8:	000b607d 	.word	0x000b607d
   b41bc:	000b6083 	.word	0x000b6083
   b41c0:	000b6092 	.word	0x000b6092
   b41c4:	000b60a1 	.word	0x000b60a1

000b41c8 <_Z11checkCardIDm>:
       
        Serial.println("");
    }
}

void checkCardID(uint32_t cardID){
   b41c8:	b508      	push	{r3, lr}
    if (cardID == 3283616780){ // Tobias Nøgle: 3283616780
   b41ca:	4b09      	ldr	r3, [pc, #36]	; (b41f0 <_Z11checkCardIDm+0x28>)
   b41cc:	4298      	cmp	r0, r3
   b41ce:	d106      	bne.n	b41de <_Z11checkCardIDm+0x16>
        Serial.println("blå brik");
   b41d0:	f001 fbca 	bl	b5968 <_Z16_fetch_usbserialv>
   b41d4:	4907      	ldr	r1, [pc, #28]	; (b41f4 <_Z11checkCardIDm+0x2c>)
    }
        if (cardID == 3248756763){ //Tobias Nøgle: 3248756763
        Serial.println("hvidt kort");
    }
}
   b41d6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        Serial.println("hvidt kort");
   b41da:	f000 bf70 	b.w	b50be <_ZN5Print7printlnEPKc>
        if (cardID == 3248756763){ //Tobias Nøgle: 3248756763
   b41de:	4b06      	ldr	r3, [pc, #24]	; (b41f8 <_Z11checkCardIDm+0x30>)
   b41e0:	4298      	cmp	r0, r3
   b41e2:	d103      	bne.n	b41ec <_Z11checkCardIDm+0x24>
        Serial.println("hvidt kort");
   b41e4:	f001 fbc0 	bl	b5968 <_Z16_fetch_usbserialv>
   b41e8:	4904      	ldr	r1, [pc, #16]	; (b41fc <_Z11checkCardIDm+0x34>)
   b41ea:	e7f4      	b.n	b41d6 <_Z11checkCardIDm+0xe>
}
   b41ec:	bd08      	pop	{r3, pc}
   b41ee:	bf00      	nop
   b41f0:	c3b8040c 	.word	0xc3b8040c
   b41f4:	000b60c3 	.word	0x000b60c3
   b41f8:	c1a4181b 	.word	0xc1a4181b
   b41fc:	000b60cd 	.word	0x000b60cd

000b4200 <loop>:
void loop() {
   b4200:	b530      	push	{r4, r5, lr}
    uint8_t uid[] = { 0, 0, 0, 0, 0, 0, 0 };  // Buffer to store the returned UID
   b4202:	4b2a      	ldr	r3, [pc, #168]	; (b42ac <loop+0xac>)
void loop() {
   b4204:	b085      	sub	sp, #20
    uint8_t uid[] = { 0, 0, 0, 0, 0, 0, 0 };  // Buffer to store the returned UID
   b4206:	6818      	ldr	r0, [r3, #0]
   b4208:	889a      	ldrh	r2, [r3, #4]
   b420a:	799b      	ldrb	r3, [r3, #6]
   b420c:	9002      	str	r0, [sp, #8]
   b420e:	f8ad 200c 	strh.w	r2, [sp, #12]
   b4212:	f88d 300e 	strb.w	r3, [sp, #14]
    uint8_t uidLength = 0;                        // Length of the UID (4 or 7 bytes depending on ISO14443A card type)
   b4216:	2100      	movs	r1, #0
    success = nfc.readPassiveTargetID(PN532_MIFARE_ISO14443A, &uid[0], &uidLength);
   b4218:	4825      	ldr	r0, [pc, #148]	; (b42b0 <loop+0xb0>)
    uint8_t uidLength = 0;                        // Length of the UID (4 or 7 bytes depending on ISO14443A card type)
   b421a:	f88d 1007 	strb.w	r1, [sp, #7]
    success = nfc.readPassiveTargetID(PN532_MIFARE_ISO14443A, &uid[0], &uidLength);
   b421e:	f10d 0307 	add.w	r3, sp, #7
   b4222:	aa02      	add	r2, sp, #8
   b4224:	f000 fa8e 	bl	b4744 <_ZN14Adafruit_PN53219readPassiveTargetIDEhPhS0_>
    if (success) {
   b4228:	2800      	cmp	r0, #0
   b422a:	d03c      	beq.n	b42a6 <loop+0xa6>
        Serial.println("Found an ISO14443A card");
   b422c:	f001 fb9c 	bl	b5968 <_Z16_fetch_usbserialv>
   b4230:	4920      	ldr	r1, [pc, #128]	; (b42b4 <loop+0xb4>)
   b4232:	f000 ff44 	bl	b50be <_ZN5Print7printlnEPKc>
        Serial.print("  UID Length: ");Serial.print(uidLength, DEC);Serial.println(" bytes");
   b4236:	f001 fb97 	bl	b5968 <_Z16_fetch_usbserialv>
   b423a:	491f      	ldr	r1, [pc, #124]	; (b42b8 <loop+0xb8>)
   b423c:	f000 ff2c 	bl	b5098 <_ZN5Print5printEPKc>
   b4240:	f001 fb92 	bl	b5968 <_Z16_fetch_usbserialv>
        return printNumber(val, base) + t;
   b4244:	220a      	movs	r2, #10
   b4246:	f89d 1007 	ldrb.w	r1, [sp, #7]
   b424a:	f000 ff42 	bl	b50d2 <_ZN5Print11printNumberEmh>
   b424e:	f001 fb8b 	bl	b5968 <_Z16_fetch_usbserialv>
   b4252:	491a      	ldr	r1, [pc, #104]	; (b42bc <loop+0xbc>)
   b4254:	f000 ff33 	bl	b50be <_ZN5Print7printlnEPKc>
        Serial.print("  UID Value: ");
   b4258:	f001 fb86 	bl	b5968 <_Z16_fetch_usbserialv>
   b425c:	4918      	ldr	r1, [pc, #96]	; (b42c0 <loop+0xc0>)
   b425e:	f000 ff1b 	bl	b5098 <_ZN5Print5printEPKc>
        nfc.PrintHex(uid, uidLength);
   b4262:	f89d 1007 	ldrb.w	r1, [sp, #7]
   b4266:	a802      	add	r0, sp, #8
   b4268:	f000 f876 	bl	b4358 <_ZN14Adafruit_PN5328PrintHexEPKhm>
        if (uidLength == 4) {
   b426c:	f89d 3007 	ldrb.w	r3, [sp, #7]
   b4270:	2b04      	cmp	r3, #4
   b4272:	d113      	bne.n	b429c <loop+0x9c>
            cardid |= uid[3]; 
   b4274:	9c02      	ldr	r4, [sp, #8]
            Serial.print("Mifare Classic card #");
   b4276:	f001 fb77 	bl	b5968 <_Z16_fetch_usbserialv>
   b427a:	4912      	ldr	r1, [pc, #72]	; (b42c4 <loop+0xc4>)
   b427c:	f000 ff0c 	bl	b5098 <_ZN5Print5printEPKc>
            Serial.println(cardid);
   b4280:	f001 fb72 	bl	b5968 <_Z16_fetch_usbserialv>
   b4284:	ba24      	rev	r4, r4
   b4286:	4605      	mov	r5, r0
   b4288:	220a      	movs	r2, #10
   b428a:	4621      	mov	r1, r4
   b428c:	f000 ff21 	bl	b50d2 <_ZN5Print11printNumberEmh>
        n += println();
   b4290:	4628      	mov	r0, r5
   b4292:	f000 ff08 	bl	b50a6 <_ZN5Print7printlnEv>
            checkCardID(cardid);
   b4296:	4620      	mov	r0, r4
   b4298:	f7ff ff96 	bl	b41c8 <_Z11checkCardIDm>
        Serial.println("");
   b429c:	f001 fb64 	bl	b5968 <_Z16_fetch_usbserialv>
   b42a0:	4909      	ldr	r1, [pc, #36]	; (b42c8 <loop+0xc8>)
   b42a2:	f000 ff0c 	bl	b50be <_ZN5Print7printlnEPKc>
}
   b42a6:	b005      	add	sp, #20
   b42a8:	bd30      	pop	{r4, r5, pc}
   b42aa:	bf00      	nop
   b42ac:	000b612a 	.word	0x000b612a
   b42b0:	2003e661 	.word	0x2003e661
   b42b4:	000b60d8 	.word	0x000b60d8
   b42b8:	000b60f0 	.word	0x000b60f0
   b42bc:	000b60ff 	.word	0x000b60ff
   b42c0:	000b6106 	.word	0x000b6106
   b42c4:	000b6114 	.word	0x000b6114
   b42c8:	000b60a0 	.word	0x000b60a0

000b42cc <_GLOBAL__sub_I_nfc>:

}

void lockUnlock(){

   b42cc:	b507      	push	{r0, r1, r2, lr}
        val_(val) {
   b42ce:	4b07      	ldr	r3, [pc, #28]	; (b42ec <_GLOBAL__sub_I_nfc+0x20>)
  Adafruit_PN532 nfc(SCK_PIN, MISO_PIN, MOSI_PIN, SS_PIN);
   b42d0:	4807      	ldr	r0, [pc, #28]	; (b42f0 <_GLOBAL__sub_I_nfc+0x24>)
   b42d2:	2200      	movs	r2, #0
   b42d4:	701a      	strb	r2, [r3, #0]
   b42d6:	230e      	movs	r3, #14
   b42d8:	9300      	str	r3, [sp, #0]
   b42da:	220b      	movs	r2, #11
   b42dc:	230c      	movs	r3, #12
   b42de:	210d      	movs	r1, #13
   b42e0:	f000 f832 	bl	b4348 <_ZN14Adafruit_PN532C1Ehhhh>
   b42e4:	b003      	add	sp, #12
   b42e6:	f85d fb04 	ldr.w	pc, [sp], #4
   b42ea:	bf00      	nop
   b42ec:	2003e660 	.word	0x2003e660
   b42f0:	2003e661 	.word	0x2003e661

000b42f4 <_ZN5Print5printIiLi0EEEjT_i.isra.0>:
size_t Print::print(T n, int base)
   b42f4:	b570      	push	{r4, r5, r6, lr}
   b42f6:	4606      	mov	r6, r0
   b42f8:	460c      	mov	r4, r1
    if (base == 0) {
   b42fa:	4615      	mov	r5, r2
   b42fc:	b92a      	cbnz	r2, b430a <_ZN5Print5printIiLi0EEEjT_i.isra.0+0x16>
        return write(n);
   b42fe:	6803      	ldr	r3, [r0, #0]
    }
}
   b4300:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        return write(n);
   b4304:	689b      	ldr	r3, [r3, #8]
   b4306:	b2c9      	uxtb	r1, r1
   b4308:	4718      	bx	r3
        if (n < 0 && base == 10) {
   b430a:	2900      	cmp	r1, #0
   b430c:	da0b      	bge.n	b4326 <_ZN5Print5printIiLi0EEEjT_i.isra.0+0x32>
   b430e:	2a0a      	cmp	r2, #10
   b4310:	d109      	bne.n	b4326 <_ZN5Print5printIiLi0EEEjT_i.isra.0+0x32>
            t = print('-');
   b4312:	212d      	movs	r1, #45	; 0x2d
   b4314:	f000 fec4 	bl	b50a0 <_ZN5Print5printEc>
            val = -n;
   b4318:	4261      	negs	r1, r4
        return printNumber(val, base) + t;
   b431a:	b2ea      	uxtb	r2, r5
   b431c:	4630      	mov	r0, r6
}
   b431e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        return printNumber(val, base) + t;
   b4322:	f000 bed6 	b.w	b50d2 <_ZN5Print11printNumberEmh>
            val = n;
   b4326:	4621      	mov	r1, r4
   b4328:	e7f7      	b.n	b431a <_ZN5Print5printIiLi0EEEjT_i.isra.0+0x26>

000b432a <_ZN5Print7printlnIhLi0EEEjT_i.isra.0>:
    size_t println(T b, int base = DEC) {
   b432a:	b510      	push	{r4, lr}
   b432c:	4604      	mov	r4, r0
    if (base == 0) {
   b432e:	b93a      	cbnz	r2, b4340 <_ZN5Print7printlnIhLi0EEEjT_i.isra.0+0x16>
        return write(n);
   b4330:	6803      	ldr	r3, [r0, #0]
   b4332:	689b      	ldr	r3, [r3, #8]
   b4334:	4798      	blx	r3
        n += println();
   b4336:	4620      	mov	r0, r4
    }
   b4338:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        n += println();
   b433c:	f000 beb3 	b.w	b50a6 <_ZN5Print7printlnEv>
        return printNumber(val, base) + t;
   b4340:	b2d2      	uxtb	r2, r2
   b4342:	f000 fec6 	bl	b50d2 <_ZN5Print11printNumberEmh>
   b4346:	e7f6      	b.n	b4336 <_ZN5Print7printlnIhLi0EEEjT_i.isra.0+0xc>

000b4348 <_ZN14Adafruit_PN532C1Ehhhh>:
    @param  miso      SPI MISO pin 
    @param  mosi      SPI MOSI pin
    @param  ss        SPI chip select pin (CS/SSEL)
*/
/**************************************************************************/
Adafruit_PN532::Adafruit_PN532(uint8_t clk, uint8_t miso, uint8_t mosi, uint8_t ss) {
   b4348:	b510      	push	{r4, lr}
  _clk = clk;
  _miso = miso;
  _mosi = mosi;
   b434a:	7103      	strb	r3, [r0, #4]
  _ss = ss;
   b434c:	f89d 3008 	ldrb.w	r3, [sp, #8]
  _clk = clk;
   b4350:	70c1      	strb	r1, [r0, #3]
  _miso = miso;
   b4352:	7142      	strb	r2, [r0, #5]
  _ss = ss;
   b4354:	7083      	strb	r3, [r0, #2]
}
   b4356:	bd10      	pop	{r4, pc}

000b4358 <_ZN14Adafruit_PN5328PrintHexEPKhm>:
    @param  data      Pointer to the byte data
    @param  numBytes  Data length in bytes
*/
/**************************************************************************/
void Adafruit_PN532::PrintHex(const byte * data, const uint32_t numBytes)
{
   b4358:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint32_t szPos;
  for (szPos=0; szPos < numBytes; szPos++) 
  {
    Serial.print("0x");
   b435c:	4f18      	ldr	r7, [pc, #96]	; (b43c0 <_ZN14Adafruit_PN5328PrintHexEPKhm+0x68>)
    // Append leading 0 for small values
    if (data[szPos] <= 0xF)
      Serial.print("0");
   b435e:	f8df 8068 	ldr.w	r8, [pc, #104]	; b43c8 <_ZN14Adafruit_PN5328PrintHexEPKhm+0x70>
    Serial.print(data[szPos], HEX);
    if ((numBytes > 1) && (szPos != numBytes - 1))
    {
      Serial.print(" ");
   b4362:	f8df 9068 	ldr.w	r9, [pc, #104]	; b43cc <_ZN14Adafruit_PN5328PrintHexEPKhm+0x74>
{
   b4366:	460d      	mov	r5, r1
   b4368:	1e44      	subs	r4, r0, #1
  for (szPos=0; szPos < numBytes; szPos++) 
   b436a:	2600      	movs	r6, #0
   b436c:	42ae      	cmp	r6, r5
   b436e:	d01f      	beq.n	b43b0 <_ZN14Adafruit_PN5328PrintHexEPKhm+0x58>
    Serial.print("0x");
   b4370:	f001 fafa 	bl	b5968 <_Z16_fetch_usbserialv>
   b4374:	4639      	mov	r1, r7
   b4376:	f000 fe8f 	bl	b5098 <_ZN5Print5printEPKc>
    if (data[szPos] <= 0xF)
   b437a:	7863      	ldrb	r3, [r4, #1]
   b437c:	2b0f      	cmp	r3, #15
   b437e:	d804      	bhi.n	b438a <_ZN14Adafruit_PN5328PrintHexEPKhm+0x32>
      Serial.print("0");
   b4380:	f001 faf2 	bl	b5968 <_Z16_fetch_usbserialv>
   b4384:	4641      	mov	r1, r8
   b4386:	f000 fe87 	bl	b5098 <_ZN5Print5printEPKc>
    Serial.print(data[szPos], HEX);
   b438a:	f001 faed 	bl	b5968 <_Z16_fetch_usbserialv>
   b438e:	f814 1f01 	ldrb.w	r1, [r4, #1]!
   b4392:	2210      	movs	r2, #16
   b4394:	f000 fe9d 	bl	b50d2 <_ZN5Print11printNumberEmh>
    if ((numBytes > 1) && (szPos != numBytes - 1))
   b4398:	2d01      	cmp	r5, #1
   b439a:	d907      	bls.n	b43ac <_ZN14Adafruit_PN5328PrintHexEPKhm+0x54>
   b439c:	1e6b      	subs	r3, r5, #1
   b439e:	42b3      	cmp	r3, r6
   b43a0:	d004      	beq.n	b43ac <_ZN14Adafruit_PN5328PrintHexEPKhm+0x54>
      Serial.print(" ");
   b43a2:	f001 fae1 	bl	b5968 <_Z16_fetch_usbserialv>
   b43a6:	4649      	mov	r1, r9
   b43a8:	f000 fe76 	bl	b5098 <_ZN5Print5printEPKc>
  for (szPos=0; szPos < numBytes; szPos++) 
   b43ac:	3601      	adds	r6, #1
   b43ae:	e7dd      	b.n	b436c <_ZN14Adafruit_PN5328PrintHexEPKhm+0x14>
    }
  }
  Serial.println("");
   b43b0:	f001 fada 	bl	b5968 <_Z16_fetch_usbserialv>
}
   b43b4:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  Serial.println("");
   b43b8:	4902      	ldr	r1, [pc, #8]	; (b43c4 <_ZN14Adafruit_PN5328PrintHexEPKhm+0x6c>)
   b43ba:	f000 be80 	b.w	b50be <_ZN5Print7printlnEPKc>
   b43be:	bf00      	nop
   b43c0:	000b613e 	.word	0x000b613e
   b43c4:	000b60a0 	.word	0x000b60a0
   b43c8:	000b6131 	.word	0x000b6131
   b43cc:	000b609f 	.word	0x000b609f

000b43d0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>:
namespace particle {

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
   b43d0:	b513      	push	{r0, r1, r4, lr}
        static SPIClass instance(Interface);
   b43d2:	4c0b      	ldr	r4, [pc, #44]	; (b4400 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x30>)
   b43d4:	7821      	ldrb	r1, [r4, #0]
   b43d6:	f3bf 8f5b 	dmb	ish
   b43da:	f011 0101 	ands.w	r1, r1, #1
   b43de:	d10b      	bne.n	b43f8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   b43e0:	4620      	mov	r0, r4
   b43e2:	9101      	str	r1, [sp, #4]
   b43e4:	f7ff fe5b 	bl	b409e <__cxa_guard_acquire>
   b43e8:	9901      	ldr	r1, [sp, #4]
   b43ea:	b128      	cbz	r0, b43f8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   b43ec:	4805      	ldr	r0, [pc, #20]	; (b4404 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   b43ee:	f000 fc97 	bl	b4d20 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b43f2:	4620      	mov	r0, r4
   b43f4:	f7ff fe58 	bl	b40a8 <__cxa_guard_release>
        return instance;
    }
   b43f8:	4802      	ldr	r0, [pc, #8]	; (b4404 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   b43fa:	b002      	add	sp, #8
   b43fc:	bd10      	pop	{r4, pc}
   b43fe:	bf00      	nop
   b4400:	2003e678 	.word	0x2003e678
   b4404:	2003e67c 	.word	0x2003e67c

000b4408 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>:
        return instance().setClockSpeed(value, scale);
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
   b4408:	b507      	push	{r0, r1, r2, lr}
   b440a:	9001      	str	r0, [sp, #4]
        return instance().transfer(data);
   b440c:	f7ff ffe0 	bl	b43d0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b4410:	9901      	ldr	r1, [sp, #4]
    }
   b4412:	b003      	add	sp, #12
   b4414:	f85d eb04 	ldr.w	lr, [sp], #4
        return instance().transfer(data);
   b4418:	f000 bd36 	b.w	b4e88 <_ZN8SPIClass8transferEh>

000b441c <_ZN14Adafruit_PN5328readbyteEv>:
*/
/**************************************************************************/
uint8_t Adafruit_PN532::readbyte(void) {
#if PN532_MODE == PN532_SPI_MODE
#if (PN532_HW_SPI == 1)
  uint8_t x = SPI.transfer(0x55);
   b441c:	2055      	movs	r0, #85	; 0x55
   b441e:	f7ff bff3 	b.w	b4408 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>

000b4422 <_ZN14Adafruit_PN53210readstatusEv>:
uint8_t Adafruit_PN532::readstatus(void) {
   b4422:	b538      	push	{r3, r4, r5, lr}
  digitalWrite(_ss, LOW);
   b4424:	2100      	movs	r1, #0
uint8_t Adafruit_PN532::readstatus(void) {
   b4426:	4604      	mov	r4, r0
  digitalWrite(_ss, LOW);
   b4428:	7880      	ldrb	r0, [r0, #2]
   b442a:	f001 fc95 	bl	b5d58 <digitalWrite>
  delay(2); 
   b442e:	2002      	movs	r0, #2
   b4430:	f000 fe80 	bl	b5134 <delay>
  SPI.transfer(c);
   b4434:	2002      	movs	r0, #2
   b4436:	f7ff ffe7 	bl	b4408 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>
  uint8_t x = readbyte();
   b443a:	4620      	mov	r0, r4
   b443c:	f7ff ffee 	bl	b441c <_ZN14Adafruit_PN5328readbyteEv>
  digitalWrite(_ss, HIGH);
   b4440:	2101      	movs	r1, #1
  uint8_t x = readbyte();
   b4442:	4605      	mov	r5, r0
  digitalWrite(_ss, HIGH);
   b4444:	78a0      	ldrb	r0, [r4, #2]
   b4446:	f001 fc87 	bl	b5d58 <digitalWrite>
}
   b444a:	4628      	mov	r0, r5
   b444c:	bd38      	pop	{r3, r4, r5, pc}
	...

000b4450 <_ZN14Adafruit_PN5328readdataEPhh>:
void Adafruit_PN532::readdata(uint8_t* buff, uint8_t n) {
   b4450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b4452:	4605      	mov	r5, r0
   b4454:	4616      	mov	r6, r2
   b4456:	460c      	mov	r4, r1
  Serial.print("Reading: ");
   b4458:	f001 fa86 	bl	b5968 <_Z16_fetch_usbserialv>
   b445c:	4917      	ldr	r1, [pc, #92]	; (b44bc <_ZN14Adafruit_PN5328readdataEPhh+0x6c>)
    Serial.print(" 0x");
   b445e:	4f18      	ldr	r7, [pc, #96]	; (b44c0 <_ZN14Adafruit_PN5328readdataEPhh+0x70>)
  Serial.print("Reading: ");
   b4460:	f000 fe1a 	bl	b5098 <_ZN5Print5printEPKc>
  digitalWrite(_ss, LOW);
   b4464:	2100      	movs	r1, #0
   b4466:	78a8      	ldrb	r0, [r5, #2]
   b4468:	f001 fc76 	bl	b5d58 <digitalWrite>
  delay(2); // common delay for SPI and I2C modes
   b446c:	2002      	movs	r0, #2
   b446e:	f000 fe61 	bl	b5134 <delay>
  SPI.transfer(c);
   b4472:	2003      	movs	r0, #3
   b4474:	f7ff ffc8 	bl	b4408 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>
  for (uint8_t i=0; i<n; i++) {
   b4478:	4426      	add	r6, r4
   b447a:	42b4      	cmp	r4, r6
   b447c:	d013      	beq.n	b44a6 <_ZN14Adafruit_PN5328readdataEPhh+0x56>
    delay(1);
   b447e:	2001      	movs	r0, #1
   b4480:	f000 fe58 	bl	b5134 <delay>
    buff[i] = readbyte();
   b4484:	4628      	mov	r0, r5
   b4486:	f7ff ffc9 	bl	b441c <_ZN14Adafruit_PN5328readbyteEv>
   b448a:	7020      	strb	r0, [r4, #0]
    Serial.print(" 0x");
   b448c:	f001 fa6c 	bl	b5968 <_Z16_fetch_usbserialv>
   b4490:	4639      	mov	r1, r7
   b4492:	f000 fe01 	bl	b5098 <_ZN5Print5printEPKc>
    Serial.print(buff[i], HEX);
   b4496:	f001 fa67 	bl	b5968 <_Z16_fetch_usbserialv>
   b449a:	f814 1b01 	ldrb.w	r1, [r4], #1
   b449e:	2210      	movs	r2, #16
   b44a0:	f000 fe17 	bl	b50d2 <_ZN5Print11printNumberEmh>
  for (uint8_t i=0; i<n; i++) {
   b44a4:	e7e9      	b.n	b447a <_ZN14Adafruit_PN5328readdataEPhh+0x2a>
  digitalWrite(_ss, HIGH);
   b44a6:	78a8      	ldrb	r0, [r5, #2]
   b44a8:	2101      	movs	r1, #1
   b44aa:	f001 fc55 	bl	b5d58 <digitalWrite>
  Serial.println();
   b44ae:	f001 fa5b 	bl	b5968 <_Z16_fetch_usbserialv>
}
   b44b2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  Serial.println();
   b44b6:	f000 bdf6 	b.w	b50a6 <_ZN5Print7printlnEv>
   b44ba:	bf00      	nop
   b44bc:	000b6133 	.word	0x000b6133
   b44c0:	000b613d 	.word	0x000b613d

000b44c4 <_ZN14Adafruit_PN5327readackEv>:
boolean Adafruit_PN532::readack() {
   b44c4:	b507      	push	{r0, r1, r2, lr}
  readdata(ackbuff, 6);
   b44c6:	2206      	movs	r2, #6
   b44c8:	4669      	mov	r1, sp
   b44ca:	f7ff ffc1 	bl	b4450 <_ZN14Adafruit_PN5328readdataEPhh>
  return (0 == strncmp((char *)ackbuff, (char *)pn532ack, 6));
   b44ce:	4905      	ldr	r1, [pc, #20]	; (b44e4 <_ZN14Adafruit_PN5327readackEv+0x20>)
   b44d0:	2206      	movs	r2, #6
   b44d2:	4668      	mov	r0, sp
   b44d4:	f001 fd49 	bl	b5f6a <strncmp>
}
   b44d8:	fab0 f080 	clz	r0, r0
   b44dc:	0940      	lsrs	r0, r0, #5
   b44de:	b003      	add	sp, #12
   b44e0:	f85d fb04 	ldr.w	pc, [sp], #4
   b44e4:	2003e5e8 	.word	0x2003e5e8

000b44e8 <_ZN14Adafruit_PN53212writecommandEPhh>:
void Adafruit_PN532::writecommand(uint8_t* cmd, uint8_t cmdlen) {
   b44e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b44ec:	4607      	mov	r7, r0
   b44ee:	4614      	mov	r4, r2
  cmdlen++;
   b44f0:	1c55      	adds	r5, r2, #1
void Adafruit_PN532::writecommand(uint8_t* cmd, uint8_t cmdlen) {
   b44f2:	4688      	mov	r8, r1
  Serial.print("\nSending: ");
   b44f4:	f001 fa38 	bl	b5968 <_Z16_fetch_usbserialv>
   b44f8:	4954      	ldr	r1, [pc, #336]	; (b464c <_ZN14Adafruit_PN53212writecommandEPhh+0x164>)
   Serial.print(" 0x"); Serial.print(cmd[i], HEX);
   b44fa:	f8df 9154 	ldr.w	r9, [pc, #340]	; b4650 <_ZN14Adafruit_PN53212writecommandEPhh+0x168>
  Serial.print("\nSending: ");
   b44fe:	f000 fdcb 	bl	b5098 <_ZN5Print5printEPKc>
  digitalWrite(_ss, LOW);
   b4502:	2100      	movs	r1, #0
   b4504:	78b8      	ldrb	r0, [r7, #2]
   b4506:	f001 fc27 	bl	b5d58 <digitalWrite>
  delay(2);     // or whatever the delay is for waking up the board
   b450a:	2002      	movs	r0, #2
   b450c:	f000 fe12 	bl	b5134 <delay>
  SPI.transfer(c);
   b4510:	2001      	movs	r0, #1
   b4512:	f7ff ff79 	bl	b4408 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>
   b4516:	2000      	movs	r0, #0
   b4518:	f7ff ff76 	bl	b4408 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>
   b451c:	2000      	movs	r0, #0
   b451e:	f7ff ff73 	bl	b4408 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>
  cmdlen++;
   b4522:	b2ed      	uxtb	r5, r5
  SPI.transfer(c);
   b4524:	20ff      	movs	r0, #255	; 0xff
   b4526:	f7ff ff6f 	bl	b4408 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>
   b452a:	4628      	mov	r0, r5
   b452c:	f7ff ff6c 	bl	b4408 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>
  writebyte(~cmdlen + 1);
   b4530:	43e0      	mvns	r0, r4
  SPI.transfer(c);
   b4532:	b2c0      	uxtb	r0, r0
   b4534:	f7ff ff68 	bl	b4408 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>
   b4538:	20d4      	movs	r0, #212	; 0xd4
   b453a:	f7ff ff65 	bl	b4408 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>
  Serial.print(" 0x"); Serial.print(PN532_PREAMBLE, HEX);
   b453e:	f001 fa13 	bl	b5968 <_Z16_fetch_usbserialv>
   b4542:	4943      	ldr	r1, [pc, #268]	; (b4650 <_ZN14Adafruit_PN53212writecommandEPhh+0x168>)
   b4544:	f000 fda8 	bl	b5098 <_ZN5Print5printEPKc>
   b4548:	f001 fa0e 	bl	b5968 <_Z16_fetch_usbserialv>
   b454c:	2210      	movs	r2, #16
   b454e:	2100      	movs	r1, #0
   b4550:	f7ff fed0 	bl	b42f4 <_ZN5Print5printIiLi0EEEjT_i.isra.0>
  Serial.print(" 0x"); Serial.print(PN532_PREAMBLE, HEX);
   b4554:	f001 fa08 	bl	b5968 <_Z16_fetch_usbserialv>
   b4558:	493d      	ldr	r1, [pc, #244]	; (b4650 <_ZN14Adafruit_PN53212writecommandEPhh+0x168>)
   b455a:	f000 fd9d 	bl	b5098 <_ZN5Print5printEPKc>
   b455e:	f001 fa03 	bl	b5968 <_Z16_fetch_usbserialv>
   b4562:	2210      	movs	r2, #16
   b4564:	2100      	movs	r1, #0
   b4566:	f7ff fec5 	bl	b42f4 <_ZN5Print5printIiLi0EEEjT_i.isra.0>
  Serial.print(" 0x"); Serial.print(PN532_STARTCODE2, HEX);
   b456a:	f001 f9fd 	bl	b5968 <_Z16_fetch_usbserialv>
   b456e:	4938      	ldr	r1, [pc, #224]	; (b4650 <_ZN14Adafruit_PN53212writecommandEPhh+0x168>)
   b4570:	f000 fd92 	bl	b5098 <_ZN5Print5printEPKc>
   b4574:	f001 f9f8 	bl	b5968 <_Z16_fetch_usbserialv>
   b4578:	2210      	movs	r2, #16
   b457a:	21ff      	movs	r1, #255	; 0xff
   b457c:	f7ff feba 	bl	b42f4 <_ZN5Print5printIiLi0EEEjT_i.isra.0>
  Serial.print(" 0x"); Serial.print(cmdlen, HEX);
   b4580:	f001 f9f2 	bl	b5968 <_Z16_fetch_usbserialv>
   b4584:	4932      	ldr	r1, [pc, #200]	; (b4650 <_ZN14Adafruit_PN53212writecommandEPhh+0x168>)
   b4586:	f000 fd87 	bl	b5098 <_ZN5Print5printEPKc>
   b458a:	f001 f9ed 	bl	b5968 <_Z16_fetch_usbserialv>
   b458e:	2210      	movs	r2, #16
   b4590:	4629      	mov	r1, r5
   b4592:	f000 fd9e 	bl	b50d2 <_ZN5Print11printNumberEmh>
  Serial.print(" 0x"); Serial.print(~cmdlen + 1, HEX);
   b4596:	f001 f9e7 	bl	b5968 <_Z16_fetch_usbserialv>
   b459a:	492d      	ldr	r1, [pc, #180]	; (b4650 <_ZN14Adafruit_PN53212writecommandEPhh+0x168>)
   b459c:	f000 fd7c 	bl	b5098 <_ZN5Print5printEPKc>
   b45a0:	f001 f9e2 	bl	b5968 <_Z16_fetch_usbserialv>
   b45a4:	2210      	movs	r2, #16
   b45a6:	4269      	negs	r1, r5
   b45a8:	f7ff fea4 	bl	b42f4 <_ZN5Print5printIiLi0EEEjT_i.isra.0>
  Serial.print(" 0x"); Serial.print(PN532_HOSTTOPN532, HEX);
   b45ac:	f001 f9dc 	bl	b5968 <_Z16_fetch_usbserialv>
   b45b0:	4927      	ldr	r1, [pc, #156]	; (b4650 <_ZN14Adafruit_PN53212writecommandEPhh+0x168>)
   b45b2:	f000 fd71 	bl	b5098 <_ZN5Print5printEPKc>
   b45b6:	f001 f9d7 	bl	b5968 <_Z16_fetch_usbserialv>
   b45ba:	2210      	movs	r2, #16
   b45bc:	21d4      	movs	r1, #212	; 0xd4
   b45be:	f7ff fe99 	bl	b42f4 <_ZN5Print5printIiLi0EEEjT_i.isra.0>
   b45c2:	2400      	movs	r4, #0
  checksum += PN532_HOSTTOPN532;
   b45c4:	26d3      	movs	r6, #211	; 0xd3
  for (uint8_t i=0; i<cmdlen-1; i++) {
   b45c6:	3d01      	subs	r5, #1
   b45c8:	f104 0a01 	add.w	sl, r4, #1
   b45cc:	b2e4      	uxtb	r4, r4
   b45ce:	42ac      	cmp	r4, r5
   b45d0:	da15      	bge.n	b45fe <_ZN14Adafruit_PN53212writecommandEPhh+0x116>
  SPI.transfer(c);
   b45d2:	f818 0004 	ldrb.w	r0, [r8, r4]
   b45d6:	f7ff ff17 	bl	b4408 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>
   checksum += cmd[i];
   b45da:	f818 3004 	ldrb.w	r3, [r8, r4]
   b45de:	441e      	add	r6, r3
   Serial.print(" 0x"); Serial.print(cmd[i], HEX);
   b45e0:	f001 f9c2 	bl	b5968 <_Z16_fetch_usbserialv>
   b45e4:	4649      	mov	r1, r9
   b45e6:	f000 fd57 	bl	b5098 <_ZN5Print5printEPKc>
   b45ea:	f001 f9bd 	bl	b5968 <_Z16_fetch_usbserialv>
   b45ee:	f818 1004 	ldrb.w	r1, [r8, r4]
   b45f2:	2210      	movs	r2, #16
   b45f4:	f000 fd6d 	bl	b50d2 <_ZN5Print11printNumberEmh>
   checksum += cmd[i];
   b45f8:	b2f6      	uxtb	r6, r6
  for (uint8_t i=0; i<cmdlen-1; i++) {
   b45fa:	4654      	mov	r4, sl
   b45fc:	e7e4      	b.n	b45c8 <_ZN14Adafruit_PN53212writecommandEPhh+0xe0>
  writebyte(~checksum);
   b45fe:	43f6      	mvns	r6, r6
  SPI.transfer(c);
   b4600:	b2f0      	uxtb	r0, r6
   b4602:	f7ff ff01 	bl	b4408 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>
   b4606:	2000      	movs	r0, #0
   b4608:	f7ff fefe 	bl	b4408 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.constprop.0>
  digitalWrite(_ss, HIGH);
   b460c:	78b8      	ldrb	r0, [r7, #2]
   b460e:	2101      	movs	r1, #1
   b4610:	f001 fba2 	bl	b5d58 <digitalWrite>
  Serial.print(" 0x"); Serial.print(~checksum, HEX);
   b4614:	f001 f9a8 	bl	b5968 <_Z16_fetch_usbserialv>
   b4618:	490d      	ldr	r1, [pc, #52]	; (b4650 <_ZN14Adafruit_PN53212writecommandEPhh+0x168>)
   b461a:	f000 fd3d 	bl	b5098 <_ZN5Print5printEPKc>
   b461e:	f001 f9a3 	bl	b5968 <_Z16_fetch_usbserialv>
   b4622:	2210      	movs	r2, #16
   b4624:	4631      	mov	r1, r6
   b4626:	f7ff fe65 	bl	b42f4 <_ZN5Print5printIiLi0EEEjT_i.isra.0>
  Serial.print(" 0x"); Serial.print(PN532_POSTAMBLE, HEX);
   b462a:	f001 f99d 	bl	b5968 <_Z16_fetch_usbserialv>
   b462e:	4908      	ldr	r1, [pc, #32]	; (b4650 <_ZN14Adafruit_PN53212writecommandEPhh+0x168>)
   b4630:	f000 fd32 	bl	b5098 <_ZN5Print5printEPKc>
   b4634:	f001 f998 	bl	b5968 <_Z16_fetch_usbserialv>
   b4638:	2210      	movs	r2, #16
   b463a:	2100      	movs	r1, #0
   b463c:	f7ff fe5a 	bl	b42f4 <_ZN5Print5printIiLi0EEEjT_i.isra.0>
  Serial.println();
   b4640:	f001 f992 	bl	b5968 <_Z16_fetch_usbserialv>
} 
   b4644:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  Serial.println();
   b4648:	f000 bd2d 	b.w	b50a6 <_ZN5Print7printlnEv>
   b464c:	000b6141 	.word	0x000b6141
   b4650:	000b613d 	.word	0x000b613d

000b4654 <_ZN14Adafruit_PN53219sendCommandCheckAckEPhht>:
boolean Adafruit_PN532::sendCommandCheckAck(uint8_t *cmd, uint8_t cmdlen, uint16_t timeout) {
   b4654:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b4656:	4607      	mov	r7, r0
   b4658:	461c      	mov	r4, r3
  writecommand(cmd, cmdlen);
   b465a:	f7ff ff45 	bl	b44e8 <_ZN14Adafruit_PN53212writecommandEPhh>
  uint16_t timer = 0;
   b465e:	2500      	movs	r5, #0
  while (readstatus() != PN532_READY) {
   b4660:	4638      	mov	r0, r7
   b4662:	f7ff fede 	bl	b4422 <_ZN14Adafruit_PN53210readstatusEv>
   b4666:	2801      	cmp	r0, #1
   b4668:	d008      	beq.n	b467c <_ZN14Adafruit_PN53219sendCommandCheckAckEPhht+0x28>
    if (timeout != 0) {
   b466a:	b11c      	cbz	r4, b4674 <_ZN14Adafruit_PN53219sendCommandCheckAckEPhht+0x20>
      timer+=10;
   b466c:	350a      	adds	r5, #10
   b466e:	b2ad      	uxth	r5, r5
      if (timer > timeout)  
   b4670:	42ac      	cmp	r4, r5
   b4672:	d317      	bcc.n	b46a4 <_ZN14Adafruit_PN53219sendCommandCheckAckEPhht+0x50>
    delay(10);
   b4674:	200a      	movs	r0, #10
   b4676:	f000 fd5d 	bl	b5134 <delay>
  while (readstatus() != PN532_READY) {
   b467a:	e7f1      	b.n	b4660 <_ZN14Adafruit_PN53219sendCommandCheckAckEPhht+0xc>
  if (!readack()) {
   b467c:	4638      	mov	r0, r7
   b467e:	f7ff ff21 	bl	b44c4 <_ZN14Adafruit_PN5327readackEv>
   b4682:	4605      	mov	r5, r0
   b4684:	b170      	cbz	r0, b46a4 <_ZN14Adafruit_PN53219sendCommandCheckAckEPhht+0x50>
  timer = 0;
   b4686:	2600      	movs	r6, #0
  while (readstatus() != PN532_READY) {
   b4688:	4638      	mov	r0, r7
   b468a:	f7ff feca 	bl	b4422 <_ZN14Adafruit_PN53210readstatusEv>
   b468e:	2801      	cmp	r0, #1
   b4690:	d009      	beq.n	b46a6 <_ZN14Adafruit_PN53219sendCommandCheckAckEPhht+0x52>
    if (timeout != 0) {
   b4692:	b11c      	cbz	r4, b469c <_ZN14Adafruit_PN53219sendCommandCheckAckEPhht+0x48>
      timer+=10;
   b4694:	360a      	adds	r6, #10
   b4696:	b2b6      	uxth	r6, r6
      if (timer > timeout)  
   b4698:	42b4      	cmp	r4, r6
   b469a:	d303      	bcc.n	b46a4 <_ZN14Adafruit_PN53219sendCommandCheckAckEPhht+0x50>
    delay(10);
   b469c:	200a      	movs	r0, #10
   b469e:	f000 fd49 	bl	b5134 <delay>
  while (readstatus() != PN532_READY) {
   b46a2:	e7f1      	b.n	b4688 <_ZN14Adafruit_PN53219sendCommandCheckAckEPhht+0x34>
        return false;
   b46a4:	2500      	movs	r5, #0
}
   b46a6:	4628      	mov	r0, r5
   b46a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

000b46ac <_ZN14Adafruit_PN53218getFirmwareVersionEv>:
uint32_t Adafruit_PN532::getFirmwareVersion(void) {
   b46ac:	b570      	push	{r4, r5, r6, lr}
  pn532_packetbuffer[0] = PN532_COMMAND_GETFIRMWAREVERSION;
   b46ae:	4d12      	ldr	r5, [pc, #72]	; (b46f8 <_ZN14Adafruit_PN53218getFirmwareVersionEv+0x4c>)
   b46b0:	2302      	movs	r3, #2
   b46b2:	702b      	strb	r3, [r5, #0]
  if (! sendCommandCheckAck(pn532_packetbuffer, 1)) {
   b46b4:	2201      	movs	r2, #1
   b46b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b46ba:	4629      	mov	r1, r5
uint32_t Adafruit_PN532::getFirmwareVersion(void) {
   b46bc:	4606      	mov	r6, r0
  if (! sendCommandCheckAck(pn532_packetbuffer, 1)) {
   b46be:	f7ff ffc9 	bl	b4654 <_ZN14Adafruit_PN53219sendCommandCheckAckEPhht>
   b46c2:	b930      	cbnz	r0, b46d2 <_ZN14Adafruit_PN53218getFirmwareVersionEv+0x26>
    Serial.println("No ACK during getFirmwareVersion!");
   b46c4:	f001 f950 	bl	b5968 <_Z16_fetch_usbserialv>
   b46c8:	490c      	ldr	r1, [pc, #48]	; (b46fc <_ZN14Adafruit_PN53218getFirmwareVersionEv+0x50>)
    Serial.println("Firmware doesn't match!");
   b46ca:	f000 fcf8 	bl	b50be <_ZN5Print7printlnEPKc>
    return 0;
   b46ce:	2000      	movs	r0, #0
}
   b46d0:	bd70      	pop	{r4, r5, r6, pc}
  readdata(pn532_packetbuffer, 12);
   b46d2:	220c      	movs	r2, #12
   b46d4:	4629      	mov	r1, r5
   b46d6:	4630      	mov	r0, r6
   b46d8:	f7ff feba 	bl	b4450 <_ZN14Adafruit_PN5328readdataEPhh>
  if (0 != strncmp((char *)pn532_packetbuffer, (char *)pn532response_firmwarevers, 6)) {
   b46dc:	4908      	ldr	r1, [pc, #32]	; (b4700 <_ZN14Adafruit_PN53218getFirmwareVersionEv+0x54>)
   b46de:	2206      	movs	r2, #6
   b46e0:	4628      	mov	r0, r5
   b46e2:	f001 fc42 	bl	b5f6a <strncmp>
   b46e6:	b118      	cbz	r0, b46f0 <_ZN14Adafruit_PN53218getFirmwareVersionEv+0x44>
    Serial.println("Firmware doesn't match!");
   b46e8:	f001 f93e 	bl	b5968 <_Z16_fetch_usbserialv>
   b46ec:	4905      	ldr	r1, [pc, #20]	; (b4704 <_ZN14Adafruit_PN53218getFirmwareVersionEv+0x58>)
   b46ee:	e7ec      	b.n	b46ca <_ZN14Adafruit_PN53218getFirmwareVersionEv+0x1e>
  response = pn532_packetbuffer[6];
   b46f0:	f8d5 0006 	ldr.w	r0, [r5, #6]
   b46f4:	ba00      	rev	r0, r0
  return response;
   b46f6:	e7eb      	b.n	b46d0 <_ZN14Adafruit_PN53218getFirmwareVersionEv+0x24>
   b46f8:	2003e684 	.word	0x2003e684
   b46fc:	000b614c 	.word	0x000b614c
   b4700:	2003e5ee 	.word	0x2003e5ee
   b4704:	000b616e 	.word	0x000b616e

000b4708 <_ZN14Adafruit_PN5329SAMConfigEv>:
boolean Adafruit_PN532::SAMConfig(void) {
   b4708:	b538      	push	{r3, r4, r5, lr}
  pn532_packetbuffer[0] = PN532_COMMAND_SAMCONFIGURATION;
   b470a:	4c0d      	ldr	r4, [pc, #52]	; (b4740 <_ZN14Adafruit_PN5329SAMConfigEv+0x38>)
   b470c:	2214      	movs	r2, #20
  pn532_packetbuffer[1] = 0x01; // normal mode;
   b470e:	2301      	movs	r3, #1
  pn532_packetbuffer[0] = PN532_COMMAND_SAMCONFIGURATION;
   b4710:	7022      	strb	r2, [r4, #0]
  pn532_packetbuffer[1] = 0x01; // normal mode;
   b4712:	7063      	strb	r3, [r4, #1]
  pn532_packetbuffer[2] = 0x14; // timeout 50ms * 20 = 1 second
   b4714:	70a2      	strb	r2, [r4, #2]
  pn532_packetbuffer[3] = 0x01; // use IRQ pin!
   b4716:	70e3      	strb	r3, [r4, #3]
  if (! sendCommandCheckAck(pn532_packetbuffer, 4))
   b4718:	2204      	movs	r2, #4
   b471a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b471e:	4621      	mov	r1, r4
boolean Adafruit_PN532::SAMConfig(void) {
   b4720:	4605      	mov	r5, r0
  if (! sendCommandCheckAck(pn532_packetbuffer, 4))
   b4722:	f7ff ff97 	bl	b4654 <_ZN14Adafruit_PN53219sendCommandCheckAckEPhht>
   b4726:	b148      	cbz	r0, b473c <_ZN14Adafruit_PN5329SAMConfigEv+0x34>
  readdata(pn532_packetbuffer, 8);
   b4728:	4628      	mov	r0, r5
   b472a:	2208      	movs	r2, #8
   b472c:	4621      	mov	r1, r4
   b472e:	f7ff fe8f 	bl	b4450 <_ZN14Adafruit_PN5328readdataEPhh>
  return  (pn532_packetbuffer[5] == 0x15);
   b4732:	7960      	ldrb	r0, [r4, #5]
   b4734:	f1a0 0315 	sub.w	r3, r0, #21
   b4738:	4258      	negs	r0, r3
   b473a:	4158      	adcs	r0, r3
}
   b473c:	bd38      	pop	{r3, r4, r5, pc}
   b473e:	bf00      	nop
   b4740:	2003e684 	.word	0x2003e684

000b4744 <_ZN14Adafruit_PN53219readPassiveTargetIDEhPhS0_>:
boolean Adafruit_PN532::readPassiveTargetID(uint8_t cardbaudrate, uint8_t * uid, uint8_t * uidLength) {
   b4744:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  pn532_packetbuffer[0] = PN532_COMMAND_INLISTPASSIVETARGET;
   b4748:	4c17      	ldr	r4, [pc, #92]	; (b47a8 <_ZN14Adafruit_PN53219readPassiveTargetIDEhPhS0_+0x64>)
boolean Adafruit_PN532::readPassiveTargetID(uint8_t cardbaudrate, uint8_t * uid, uint8_t * uidLength) {
   b474a:	461f      	mov	r7, r3
  pn532_packetbuffer[0] = PN532_COMMAND_INLISTPASSIVETARGET;
   b474c:	234a      	movs	r3, #74	; 0x4a
   b474e:	7023      	strb	r3, [r4, #0]
  pn532_packetbuffer[1] = 1;  // max 1 cards at once (we can set this to 2 later)
   b4750:	2301      	movs	r3, #1
   b4752:	7063      	strb	r3, [r4, #1]
  pn532_packetbuffer[2] = cardbaudrate;
   b4754:	70a1      	strb	r1, [r4, #2]
boolean Adafruit_PN532::readPassiveTargetID(uint8_t cardbaudrate, uint8_t * uid, uint8_t * uidLength) {
   b4756:	4616      	mov	r6, r2
  if (! sendCommandCheckAck(pn532_packetbuffer, 3))
   b4758:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b475c:	2203      	movs	r2, #3
   b475e:	4621      	mov	r1, r4
boolean Adafruit_PN532::readPassiveTargetID(uint8_t cardbaudrate, uint8_t * uid, uint8_t * uidLength) {
   b4760:	4680      	mov	r8, r0
  if (! sendCommandCheckAck(pn532_packetbuffer, 3))
   b4762:	f7ff ff77 	bl	b4654 <_ZN14Adafruit_PN53219sendCommandCheckAckEPhht>
   b4766:	4605      	mov	r5, r0
   b4768:	b938      	cbnz	r0, b477a <_ZN14Adafruit_PN53219readPassiveTargetIDEhPhS0_+0x36>
    Serial.println("No card(s) read");
   b476a:	f001 f8fd 	bl	b5968 <_Z16_fetch_usbserialv>
   b476e:	490f      	ldr	r1, [pc, #60]	; (b47ac <_ZN14Adafruit_PN53219readPassiveTargetIDEhPhS0_+0x68>)
   b4770:	f000 fca5 	bl	b50be <_ZN5Print7printlnEPKc>
}
   b4774:	4628      	mov	r0, r5
   b4776:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  readdata(pn532_packetbuffer, 20);
   b477a:	2214      	movs	r2, #20
   b477c:	4621      	mov	r1, r4
   b477e:	4640      	mov	r0, r8
   b4780:	f7ff fe66 	bl	b4450 <_ZN14Adafruit_PN5328readdataEPhh>
  if (pn532_packetbuffer[7] != 1) 
   b4784:	79e3      	ldrb	r3, [r4, #7]
   b4786:	2b01      	cmp	r3, #1
   b4788:	d10b      	bne.n	b47a2 <_ZN14Adafruit_PN53219readPassiveTargetIDEhPhS0_+0x5e>
  *uidLength = pn532_packetbuffer[12];
   b478a:	7b23      	ldrb	r3, [r4, #12]
   b478c:	703b      	strb	r3, [r7, #0]
   b478e:	2300      	movs	r3, #0
  for (uint8_t i=0; i < pn532_packetbuffer[12]; i++) 
   b4790:	7b22      	ldrb	r2, [r4, #12]
   b4792:	b2d9      	uxtb	r1, r3
   b4794:	428a      	cmp	r2, r1
   b4796:	d9ed      	bls.n	b4774 <_ZN14Adafruit_PN53219readPassiveTargetIDEhPhS0_+0x30>
    uid[i] = pn532_packetbuffer[13+i];
   b4798:	1862      	adds	r2, r4, r1
   b479a:	3301      	adds	r3, #1
   b479c:	7b52      	ldrb	r2, [r2, #13]
   b479e:	5472      	strb	r2, [r6, r1]
  for (uint8_t i=0; i < pn532_packetbuffer[12]; i++) 
   b47a0:	e7f6      	b.n	b4790 <_ZN14Adafruit_PN53219readPassiveTargetIDEhPhS0_+0x4c>
    return 0;
   b47a2:	2500      	movs	r5, #0
   b47a4:	e7e6      	b.n	b4774 <_ZN14Adafruit_PN53219readPassiveTargetIDEhPhS0_+0x30>
   b47a6:	bf00      	nop
   b47a8:	2003e684 	.word	0x2003e684
   b47ac:	000b6186 	.word	0x000b6186

000b47b0 <_ZN14Adafruit_PN5325beginEv>:
void Adafruit_PN532::begin() {
   b47b0:	b513      	push	{r0, r1, r4, lr}
   b47b2:	4604      	mov	r4, r0
        instance().setClockDivider(divider);
   b47b4:	f7ff fe0c 	bl	b43d0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b47b8:	2118      	movs	r1, #24
   b47ba:	f000 fb3f 	bl	b4e3c <_ZN8SPIClass15setClockDividerEh>
        instance().setDataMode(mode);
   b47be:	f7ff fe07 	bl	b43d0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b47c2:	2100      	movs	r1, #0
   b47c4:	f000 fade 	bl	b4d84 <_ZN8SPIClass11setDataModeEh>
        instance().setBitOrder(order);
   b47c8:	f7ff fe02 	bl	b43d0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b47cc:	2100      	movs	r1, #0
   b47ce:	f000 fac5 	bl	b4d5c <_ZN8SPIClass11setBitOrderEh>
    SPI.begin(_ss);
   b47d2:	78a1      	ldrb	r1, [r4, #2]
   b47d4:	9101      	str	r1, [sp, #4]
        instance().begin(ss_pin);
   b47d6:	f7ff fdfb 	bl	b43d0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b47da:	9901      	ldr	r1, [sp, #4]
   b47dc:	f000 faaa 	bl	b4d34 <_ZN8SPIClass5beginEt>
      Serial.print("[SPI PINS] CLK:A3,MISO:A4,MOSI:A5,SS:"); Serial.println(_ss);
   b47e0:	f001 f8c2 	bl	b5968 <_Z16_fetch_usbserialv>
   b47e4:	4910      	ldr	r1, [pc, #64]	; (b4828 <_ZN14Adafruit_PN5325beginEv+0x78>)
   b47e6:	f000 fc57 	bl	b5098 <_ZN5Print5printEPKc>
   b47ea:	f001 f8bd 	bl	b5968 <_Z16_fetch_usbserialv>
   b47ee:	220a      	movs	r2, #10
   b47f0:	78a1      	ldrb	r1, [r4, #2]
   b47f2:	f7ff fd9a 	bl	b432a <_ZN5Print7printlnIhLi0EEEjT_i.isra.0>
  digitalWrite(_ss, LOW);
   b47f6:	78a0      	ldrb	r0, [r4, #2]
   b47f8:	2100      	movs	r1, #0
   b47fa:	f001 faad 	bl	b5d58 <digitalWrite>
  delay(1000);
   b47fe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   b4802:	f000 fc97 	bl	b5134 <delay>
  pn532_packetbuffer[0] = PN532_COMMAND_GETFIRMWAREVERSION;
   b4806:	4909      	ldr	r1, [pc, #36]	; (b482c <_ZN14Adafruit_PN5325beginEv+0x7c>)
   b4808:	2302      	movs	r3, #2
   b480a:	700b      	strb	r3, [r1, #0]
  sendCommandCheckAck(pn532_packetbuffer, 1);
   b480c:	2201      	movs	r2, #1
   b480e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b4812:	4620      	mov	r0, r4
   b4814:	f7ff ff1e 	bl	b4654 <_ZN14Adafruit_PN53219sendCommandCheckAckEPhht>
  digitalWrite(_ss, HIGH);
   b4818:	78a0      	ldrb	r0, [r4, #2]
   b481a:	2101      	movs	r1, #1
}
   b481c:	b002      	add	sp, #8
   b481e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  digitalWrite(_ss, HIGH);
   b4822:	f001 ba99 	b.w	b5d58 <digitalWrite>
   b4826:	bf00      	nop
   b4828:	000b6196 	.word	0x000b6196
   b482c:	2003e684 	.word	0x2003e684

000b4830 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b4830:	b508      	push	{r3, lr}
   b4832:	4b02      	ldr	r3, [pc, #8]	; (b483c <netdb_freeaddrinfo+0xc>)
   b4834:	681b      	ldr	r3, [r3, #0]
   b4836:	689b      	ldr	r3, [r3, #8]
   b4838:	9301      	str	r3, [sp, #4]
   b483a:	bd08      	pop	{r3, pc}
   b483c:	00030268 	.word	0x00030268

000b4840 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b4840:	b508      	push	{r3, lr}
   b4842:	4b02      	ldr	r3, [pc, #8]	; (b484c <netdb_getaddrinfo+0xc>)
   b4844:	681b      	ldr	r3, [r3, #0]
   b4846:	68db      	ldr	r3, [r3, #12]
   b4848:	9301      	str	r3, [sp, #4]
   b484a:	bd08      	pop	{r3, pc}
   b484c:	00030268 	.word	0x00030268

000b4850 <HAL_Get_Pin_Mode>:
DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   b4850:	b508      	push	{r3, lr}
   b4852:	4b02      	ldr	r3, [pc, #8]	; (b485c <HAL_Get_Pin_Mode+0xc>)
   b4854:	681b      	ldr	r3, [r3, #0]
   b4856:	68db      	ldr	r3, [r3, #12]
   b4858:	9301      	str	r3, [sp, #4]
   b485a:	bd08      	pop	{r3, pc}
   b485c:	0003022c 	.word	0x0003022c

000b4860 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   b4860:	b508      	push	{r3, lr}
   b4862:	4b02      	ldr	r3, [pc, #8]	; (b486c <HAL_GPIO_Write+0xc>)
   b4864:	681b      	ldr	r3, [r3, #0]
   b4866:	691b      	ldr	r3, [r3, #16]
   b4868:	9301      	str	r3, [sp, #4]
   b486a:	bd08      	pop	{r3, pc}
   b486c:	0003022c 	.word	0x0003022c

000b4870 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b4870:	b508      	push	{r3, lr}
   b4872:	4b02      	ldr	r3, [pc, #8]	; (b487c <HAL_RNG_GetRandomNumber+0xc>)
   b4874:	681b      	ldr	r3, [r3, #0]
   b4876:	685b      	ldr	r3, [r3, #4]
   b4878:	9301      	str	r3, [sp, #4]
   b487a:	bd08      	pop	{r3, pc}
   b487c:	00030218 	.word	0x00030218

000b4880 <HAL_Timer_Get_Milli_Seconds>:
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b4880:	b508      	push	{r3, lr}
   b4882:	4b02      	ldr	r3, [pc, #8]	; (b488c <HAL_Timer_Get_Milli_Seconds+0xc>)
   b4884:	681b      	ldr	r3, [r3, #0]
   b4886:	695b      	ldr	r3, [r3, #20]
   b4888:	9301      	str	r3, [sp, #4]
   b488a:	bd08      	pop	{r3, pc}
   b488c:	00030218 	.word	0x00030218

000b4890 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b4890:	b508      	push	{r3, lr}
   b4892:	4b02      	ldr	r3, [pc, #8]	; (b489c <os_mutex_recursive_create+0xc>)
   b4894:	681b      	ldr	r3, [r3, #0]
   b4896:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b4898:	9301      	str	r3, [sp, #4]
   b489a:	bd08      	pop	{r3, pc}
   b489c:	00030248 	.word	0x00030248

000b48a0 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b48a0:	b508      	push	{r3, lr}
   b48a2:	4b02      	ldr	r3, [pc, #8]	; (b48ac <inet_inet_ntop+0xc>)
   b48a4:	681b      	ldr	r3, [r3, #0]
   b48a6:	695b      	ldr	r3, [r3, #20]
   b48a8:	9301      	str	r3, [sp, #4]
   b48aa:	bd08      	pop	{r3, pc}
   b48ac:	00030264 	.word	0x00030264

000b48b0 <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b48b0:	b508      	push	{r3, lr}
   b48b2:	4b02      	ldr	r3, [pc, #8]	; (b48bc <hal_usart_write+0xc>)
   b48b4:	681b      	ldr	r3, [r3, #0]
   b48b6:	68db      	ldr	r3, [r3, #12]
   b48b8:	9301      	str	r3, [sp, #4]
   b48ba:	bd08      	pop	{r3, pc}
   b48bc:	0003023c 	.word	0x0003023c

000b48c0 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b48c0:	b508      	push	{r3, lr}
   b48c2:	4b02      	ldr	r3, [pc, #8]	; (b48cc <hal_usart_available+0xc>)
   b48c4:	681b      	ldr	r3, [r3, #0]
   b48c6:	691b      	ldr	r3, [r3, #16]
   b48c8:	9301      	str	r3, [sp, #4]
   b48ca:	bd08      	pop	{r3, pc}
   b48cc:	0003023c 	.word	0x0003023c

000b48d0 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b48d0:	b508      	push	{r3, lr}
   b48d2:	4b02      	ldr	r3, [pc, #8]	; (b48dc <hal_usart_read+0xc>)
   b48d4:	681b      	ldr	r3, [r3, #0]
   b48d6:	695b      	ldr	r3, [r3, #20]
   b48d8:	9301      	str	r3, [sp, #4]
   b48da:	bd08      	pop	{r3, pc}
   b48dc:	0003023c 	.word	0x0003023c

000b48e0 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b48e0:	b508      	push	{r3, lr}
   b48e2:	4b02      	ldr	r3, [pc, #8]	; (b48ec <hal_usart_peek+0xc>)
   b48e4:	681b      	ldr	r3, [r3, #0]
   b48e6:	699b      	ldr	r3, [r3, #24]
   b48e8:	9301      	str	r3, [sp, #4]
   b48ea:	bd08      	pop	{r3, pc}
   b48ec:	0003023c 	.word	0x0003023c

000b48f0 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b48f0:	b508      	push	{r3, lr}
   b48f2:	4b02      	ldr	r3, [pc, #8]	; (b48fc <hal_usart_flush+0xc>)
   b48f4:	681b      	ldr	r3, [r3, #0]
   b48f6:	69db      	ldr	r3, [r3, #28]
   b48f8:	9301      	str	r3, [sp, #4]
   b48fa:	bd08      	pop	{r3, pc}
   b48fc:	0003023c 	.word	0x0003023c

000b4900 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b4900:	b508      	push	{r3, lr}
   b4902:	4b02      	ldr	r3, [pc, #8]	; (b490c <hal_usart_is_enabled+0xc>)
   b4904:	681b      	ldr	r3, [r3, #0]
   b4906:	6a1b      	ldr	r3, [r3, #32]
   b4908:	9301      	str	r3, [sp, #4]
   b490a:	bd08      	pop	{r3, pc}
   b490c:	0003023c 	.word	0x0003023c

000b4910 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b4910:	b508      	push	{r3, lr}
   b4912:	4b02      	ldr	r3, [pc, #8]	; (b491c <hal_usart_available_data_for_write+0xc>)
   b4914:	681b      	ldr	r3, [r3, #0]
   b4916:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b4918:	9301      	str	r3, [sp, #4]
   b491a:	bd08      	pop	{r3, pc}
   b491c:	0003023c 	.word	0x0003023c

000b4920 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b4920:	b508      	push	{r3, lr}
   b4922:	4b02      	ldr	r3, [pc, #8]	; (b492c <hal_usart_init_ex+0xc>)
   b4924:	681b      	ldr	r3, [r3, #0]
   b4926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4928:	9301      	str	r3, [sp, #4]
   b492a:	bd08      	pop	{r3, pc}
   b492c:	0003023c 	.word	0x0003023c

000b4930 <hal_i2c_write>:
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b4930:	b508      	push	{r3, lr}
   b4932:	4b02      	ldr	r3, [pc, #8]	; (b493c <hal_i2c_write+0xc>)
   b4934:	681b      	ldr	r3, [r3, #0]
   b4936:	6a1b      	ldr	r3, [r3, #32]
   b4938:	9301      	str	r3, [sp, #4]
   b493a:	bd08      	pop	{r3, pc}
   b493c:	00030228 	.word	0x00030228

000b4940 <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b4940:	b508      	push	{r3, lr}
   b4942:	4b02      	ldr	r3, [pc, #8]	; (b494c <hal_i2c_available+0xc>)
   b4944:	681b      	ldr	r3, [r3, #0]
   b4946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b4948:	9301      	str	r3, [sp, #4]
   b494a:	bd08      	pop	{r3, pc}
   b494c:	00030228 	.word	0x00030228

000b4950 <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b4950:	b508      	push	{r3, lr}
   b4952:	4b02      	ldr	r3, [pc, #8]	; (b495c <hal_i2c_read+0xc>)
   b4954:	681b      	ldr	r3, [r3, #0]
   b4956:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b4958:	9301      	str	r3, [sp, #4]
   b495a:	bd08      	pop	{r3, pc}
   b495c:	00030228 	.word	0x00030228

000b4960 <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b4960:	b508      	push	{r3, lr}
   b4962:	4b02      	ldr	r3, [pc, #8]	; (b496c <hal_i2c_peek+0xc>)
   b4964:	681b      	ldr	r3, [r3, #0]
   b4966:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b4968:	9301      	str	r3, [sp, #4]
   b496a:	bd08      	pop	{r3, pc}
   b496c:	00030228 	.word	0x00030228

000b4970 <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b4970:	b508      	push	{r3, lr}
   b4972:	4b02      	ldr	r3, [pc, #8]	; (b497c <hal_i2c_flush+0xc>)
   b4974:	681b      	ldr	r3, [r3, #0]
   b4976:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b4978:	9301      	str	r3, [sp, #4]
   b497a:	bd08      	pop	{r3, pc}
   b497c:	00030228 	.word	0x00030228

000b4980 <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b4980:	b508      	push	{r3, lr}
   b4982:	4b02      	ldr	r3, [pc, #8]	; (b498c <hal_i2c_is_enabled+0xc>)
   b4984:	681b      	ldr	r3, [r3, #0]
   b4986:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b4988:	9301      	str	r3, [sp, #4]
   b498a:	bd08      	pop	{r3, pc}
   b498c:	00030228 	.word	0x00030228

000b4990 <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b4990:	b508      	push	{r3, lr}
   b4992:	4b02      	ldr	r3, [pc, #8]	; (b499c <hal_i2c_init+0xc>)
   b4994:	681b      	ldr	r3, [r3, #0]
   b4996:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4998:	9301      	str	r3, [sp, #4]
   b499a:	bd08      	pop	{r3, pc}
   b499c:	00030228 	.word	0x00030228

000b49a0 <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   b49a0:	b508      	push	{r3, lr}
   b49a2:	4b02      	ldr	r3, [pc, #8]	; (b49ac <hal_spi_begin+0xc>)
   b49a4:	681b      	ldr	r3, [r3, #0]
   b49a6:	681b      	ldr	r3, [r3, #0]
   b49a8:	9301      	str	r3, [sp, #4]
   b49aa:	bd08      	pop	{r3, pc}
   b49ac:	00030230 	.word	0x00030230

000b49b0 <hal_spi_set_bit_order>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
   b49b0:	b508      	push	{r3, lr}
   b49b2:	4b02      	ldr	r3, [pc, #8]	; (b49bc <hal_spi_set_bit_order+0xc>)
   b49b4:	681b      	ldr	r3, [r3, #0]
   b49b6:	689b      	ldr	r3, [r3, #8]
   b49b8:	9301      	str	r3, [sp, #4]
   b49ba:	bd08      	pop	{r3, pc}
   b49bc:	00030230 	.word	0x00030230

000b49c0 <hal_spi_set_data_mode>:
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
   b49c0:	b508      	push	{r3, lr}
   b49c2:	4b02      	ldr	r3, [pc, #8]	; (b49cc <hal_spi_set_data_mode+0xc>)
   b49c4:	681b      	ldr	r3, [r3, #0]
   b49c6:	68db      	ldr	r3, [r3, #12]
   b49c8:	9301      	str	r3, [sp, #4]
   b49ca:	bd08      	pop	{r3, pc}
   b49cc:	00030230 	.word	0x00030230

000b49d0 <hal_spi_set_clock_divider>:
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
   b49d0:	b508      	push	{r3, lr}
   b49d2:	4b02      	ldr	r3, [pc, #8]	; (b49dc <hal_spi_set_clock_divider+0xc>)
   b49d4:	681b      	ldr	r3, [r3, #0]
   b49d6:	691b      	ldr	r3, [r3, #16]
   b49d8:	9301      	str	r3, [sp, #4]
   b49da:	bd08      	pop	{r3, pc}
   b49dc:	00030230 	.word	0x00030230

000b49e0 <hal_spi_transfer>:
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
   b49e0:	b508      	push	{r3, lr}
   b49e2:	4b02      	ldr	r3, [pc, #8]	; (b49ec <hal_spi_transfer+0xc>)
   b49e4:	681b      	ldr	r3, [r3, #0]
   b49e6:	695b      	ldr	r3, [r3, #20]
   b49e8:	9301      	str	r3, [sp, #4]
   b49ea:	bd08      	pop	{r3, pc}
   b49ec:	00030230 	.word	0x00030230

000b49f0 <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b49f0:	b508      	push	{r3, lr}
   b49f2:	4b02      	ldr	r3, [pc, #8]	; (b49fc <hal_spi_init+0xc>)
   b49f4:	681b      	ldr	r3, [r3, #0]
   b49f6:	69db      	ldr	r3, [r3, #28]
   b49f8:	9301      	str	r3, [sp, #4]
   b49fa:	bd08      	pop	{r3, pc}
   b49fc:	00030230 	.word	0x00030230

000b4a00 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b4a00:	b508      	push	{r3, lr}
   b4a02:	4b02      	ldr	r3, [pc, #8]	; (b4a0c <hal_spi_is_enabled+0xc>)
   b4a04:	681b      	ldr	r3, [r3, #0]
   b4a06:	6a1b      	ldr	r3, [r3, #32]
   b4a08:	9301      	str	r3, [sp, #4]
   b4a0a:	bd08      	pop	{r3, pc}
   b4a0c:	00030230 	.word	0x00030230

000b4a10 <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   b4a10:	b508      	push	{r3, lr}
   b4a12:	4b02      	ldr	r3, [pc, #8]	; (b4a1c <hal_spi_info+0xc>)
   b4a14:	681b      	ldr	r3, [r3, #0]
   b4a16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b4a18:	9301      	str	r3, [sp, #4]
   b4a1a:	bd08      	pop	{r3, pc}
   b4a1c:	00030230 	.word	0x00030230

000b4a20 <hal_spi_acquire>:
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   b4a20:	b508      	push	{r3, lr}
   b4a22:	4b02      	ldr	r3, [pc, #8]	; (b4a2c <hal_spi_acquire+0xc>)
   b4a24:	681b      	ldr	r3, [r3, #0]
   b4a26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4a28:	9301      	str	r3, [sp, #4]
   b4a2a:	bd08      	pop	{r3, pc}
   b4a2c:	00030230 	.word	0x00030230

000b4a30 <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   b4a30:	b508      	push	{r3, lr}
   b4a32:	4b02      	ldr	r3, [pc, #8]	; (b4a3c <hal_spi_release+0xc>)
   b4a34:	681b      	ldr	r3, [r3, #0]
   b4a36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b4a38:	9301      	str	r3, [sp, #4]
   b4a3a:	bd08      	pop	{r3, pc}
   b4a3c:	00030230 	.word	0x00030230

000b4a40 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b4a40:	b508      	push	{r3, lr}
   b4a42:	4b02      	ldr	r3, [pc, #8]	; (b4a4c <HAL_USB_USART_Init+0xc>)
   b4a44:	681b      	ldr	r3, [r3, #0]
   b4a46:	681b      	ldr	r3, [r3, #0]
   b4a48:	9301      	str	r3, [sp, #4]
   b4a4a:	bd08      	pop	{r3, pc}
   b4a4c:	0003024c 	.word	0x0003024c

000b4a50 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   b4a50:	b508      	push	{r3, lr}
   b4a52:	4b02      	ldr	r3, [pc, #8]	; (b4a5c <HAL_USB_USART_Begin+0xc>)
   b4a54:	681b      	ldr	r3, [r3, #0]
   b4a56:	685b      	ldr	r3, [r3, #4]
   b4a58:	9301      	str	r3, [sp, #4]
   b4a5a:	bd08      	pop	{r3, pc}
   b4a5c:	0003024c 	.word	0x0003024c

000b4a60 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b4a60:	b508      	push	{r3, lr}
   b4a62:	4b02      	ldr	r3, [pc, #8]	; (b4a6c <HAL_USB_USART_Available_Data+0xc>)
   b4a64:	681b      	ldr	r3, [r3, #0]
   b4a66:	691b      	ldr	r3, [r3, #16]
   b4a68:	9301      	str	r3, [sp, #4]
   b4a6a:	bd08      	pop	{r3, pc}
   b4a6c:	0003024c 	.word	0x0003024c

000b4a70 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b4a70:	b508      	push	{r3, lr}
   b4a72:	4b02      	ldr	r3, [pc, #8]	; (b4a7c <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b4a74:	681b      	ldr	r3, [r3, #0]
   b4a76:	695b      	ldr	r3, [r3, #20]
   b4a78:	9301      	str	r3, [sp, #4]
   b4a7a:	bd08      	pop	{r3, pc}
   b4a7c:	0003024c 	.word	0x0003024c

000b4a80 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b4a80:	b508      	push	{r3, lr}
   b4a82:	4b02      	ldr	r3, [pc, #8]	; (b4a8c <HAL_USB_USART_Receive_Data+0xc>)
   b4a84:	681b      	ldr	r3, [r3, #0]
   b4a86:	699b      	ldr	r3, [r3, #24]
   b4a88:	9301      	str	r3, [sp, #4]
   b4a8a:	bd08      	pop	{r3, pc}
   b4a8c:	0003024c 	.word	0x0003024c

000b4a90 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b4a90:	b508      	push	{r3, lr}
   b4a92:	4b02      	ldr	r3, [pc, #8]	; (b4a9c <HAL_USB_USART_Send_Data+0xc>)
   b4a94:	681b      	ldr	r3, [r3, #0]
   b4a96:	69db      	ldr	r3, [r3, #28]
   b4a98:	9301      	str	r3, [sp, #4]
   b4a9a:	bd08      	pop	{r3, pc}
   b4a9c:	0003024c 	.word	0x0003024c

000b4aa0 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b4aa0:	b508      	push	{r3, lr}
   b4aa2:	4b02      	ldr	r3, [pc, #8]	; (b4aac <HAL_USB_USART_Flush_Data+0xc>)
   b4aa4:	681b      	ldr	r3, [r3, #0]
   b4aa6:	6a1b      	ldr	r3, [r3, #32]
   b4aa8:	9301      	str	r3, [sp, #4]
   b4aaa:	bd08      	pop	{r3, pc}
   b4aac:	0003024c 	.word	0x0003024c

000b4ab0 <HAL_USB_USART_Is_Enabled>:
DYNALIB_FN(9, hal_usb, HAL_USB_USART_Is_Enabled, bool(HAL_USB_USART_Serial))
   b4ab0:	b508      	push	{r3, lr}
   b4ab2:	4b02      	ldr	r3, [pc, #8]	; (b4abc <HAL_USB_USART_Is_Enabled+0xc>)
   b4ab4:	681b      	ldr	r3, [r3, #0]
   b4ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b4ab8:	9301      	str	r3, [sp, #4]
   b4aba:	bd08      	pop	{r3, pc}
   b4abc:	0003024c 	.word	0x0003024c

000b4ac0 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b4ac0:	b508      	push	{r3, lr}
   b4ac2:	4b02      	ldr	r3, [pc, #8]	; (b4acc <set_system_mode+0xc>)
   b4ac4:	681b      	ldr	r3, [r3, #0]
   b4ac6:	685b      	ldr	r3, [r3, #4]
   b4ac8:	9301      	str	r3, [sp, #4]
   b4aca:	bd08      	pop	{r3, pc}
   b4acc:	00030220 	.word	0x00030220

000b4ad0 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b4ad0:	b508      	push	{r3, lr}
   b4ad2:	4b02      	ldr	r3, [pc, #8]	; (b4adc <system_delay_ms+0xc>)
   b4ad4:	681b      	ldr	r3, [r3, #0]
   b4ad6:	695b      	ldr	r3, [r3, #20]
   b4ad8:	9301      	str	r3, [sp, #4]
   b4ada:	bd08      	pop	{r3, pc}
   b4adc:	00030220 	.word	0x00030220

000b4ae0 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   b4ae0:	b508      	push	{r3, lr}
   b4ae2:	4b02      	ldr	r3, [pc, #8]	; (b4aec <application_thread_current+0xc>)
   b4ae4:	681b      	ldr	r3, [r3, #0]
   b4ae6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b4ae8:	9301      	str	r3, [sp, #4]
   b4aea:	bd08      	pop	{r3, pc}
   b4aec:	00030220 	.word	0x00030220

000b4af0 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   b4af0:	b508      	push	{r3, lr}
   b4af2:	4b02      	ldr	r3, [pc, #8]	; (b4afc <application_thread_invoke+0xc>)
   b4af4:	681b      	ldr	r3, [r3, #0]
   b4af6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b4af8:	9301      	str	r3, [sp, #4]
   b4afa:	bd08      	pop	{r3, pc}
   b4afc:	00030220 	.word	0x00030220

000b4b00 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b4b00:	b508      	push	{r3, lr}
   b4b02:	4b03      	ldr	r3, [pc, #12]	; (b4b10 <system_ctrl_set_app_request_handler+0x10>)
   b4b04:	681b      	ldr	r3, [r3, #0]
   b4b06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b4b0a:	9301      	str	r3, [sp, #4]
   b4b0c:	bd08      	pop	{r3, pc}
   b4b0e:	0000      	.short	0x0000
   b4b10:	00030220 	.word	0x00030220

000b4b14 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b4b14:	b508      	push	{r3, lr}
   b4b16:	4b03      	ldr	r3, [pc, #12]	; (b4b24 <system_ctrl_set_result+0x10>)
   b4b18:	681b      	ldr	r3, [r3, #0]
   b4b1a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b4b1e:	9301      	str	r3, [sp, #4]
   b4b20:	bd08      	pop	{r3, pc}
   b4b22:	0000      	.short	0x0000
   b4b24:	00030220 	.word	0x00030220

000b4b28 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b4b28:	b508      	push	{r3, lr}
   b4b2a:	4b02      	ldr	r3, [pc, #8]	; (b4b34 <network_connect+0xc>)
   b4b2c:	681b      	ldr	r3, [r3, #0]
   b4b2e:	685b      	ldr	r3, [r3, #4]
   b4b30:	9301      	str	r3, [sp, #4]
   b4b32:	bd08      	pop	{r3, pc}
   b4b34:	00030240 	.word	0x00030240

000b4b38 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b4b38:	b508      	push	{r3, lr}
   b4b3a:	4b02      	ldr	r3, [pc, #8]	; (b4b44 <network_connecting+0xc>)
   b4b3c:	681b      	ldr	r3, [r3, #0]
   b4b3e:	689b      	ldr	r3, [r3, #8]
   b4b40:	9301      	str	r3, [sp, #4]
   b4b42:	bd08      	pop	{r3, pc}
   b4b44:	00030240 	.word	0x00030240

000b4b48 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b4b48:	b508      	push	{r3, lr}
   b4b4a:	4b02      	ldr	r3, [pc, #8]	; (b4b54 <network_disconnect+0xc>)
   b4b4c:	681b      	ldr	r3, [r3, #0]
   b4b4e:	68db      	ldr	r3, [r3, #12]
   b4b50:	9301      	str	r3, [sp, #4]
   b4b52:	bd08      	pop	{r3, pc}
   b4b54:	00030240 	.word	0x00030240

000b4b58 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b4b58:	b508      	push	{r3, lr}
   b4b5a:	4b02      	ldr	r3, [pc, #8]	; (b4b64 <network_ready+0xc>)
   b4b5c:	681b      	ldr	r3, [r3, #0]
   b4b5e:	691b      	ldr	r3, [r3, #16]
   b4b60:	9301      	str	r3, [sp, #4]
   b4b62:	bd08      	pop	{r3, pc}
   b4b64:	00030240 	.word	0x00030240

000b4b68 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b4b68:	b508      	push	{r3, lr}
   b4b6a:	4b02      	ldr	r3, [pc, #8]	; (b4b74 <network_on+0xc>)
   b4b6c:	681b      	ldr	r3, [r3, #0]
   b4b6e:	695b      	ldr	r3, [r3, #20]
   b4b70:	9301      	str	r3, [sp, #4]
   b4b72:	bd08      	pop	{r3, pc}
   b4b74:	00030240 	.word	0x00030240

000b4b78 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b4b78:	b508      	push	{r3, lr}
   b4b7a:	4b02      	ldr	r3, [pc, #8]	; (b4b84 <network_off+0xc>)
   b4b7c:	681b      	ldr	r3, [r3, #0]
   b4b7e:	699b      	ldr	r3, [r3, #24]
   b4b80:	9301      	str	r3, [sp, #4]
   b4b82:	bd08      	pop	{r3, pc}
   b4b84:	00030240 	.word	0x00030240

000b4b88 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b4b88:	b508      	push	{r3, lr}
   b4b8a:	4b02      	ldr	r3, [pc, #8]	; (b4b94 <network_listen+0xc>)
   b4b8c:	681b      	ldr	r3, [r3, #0]
   b4b8e:	69db      	ldr	r3, [r3, #28]
   b4b90:	9301      	str	r3, [sp, #4]
   b4b92:	bd08      	pop	{r3, pc}
   b4b94:	00030240 	.word	0x00030240

000b4b98 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b4b98:	b508      	push	{r3, lr}
   b4b9a:	4b02      	ldr	r3, [pc, #8]	; (b4ba4 <network_listening+0xc>)
   b4b9c:	681b      	ldr	r3, [r3, #0]
   b4b9e:	6a1b      	ldr	r3, [r3, #32]
   b4ba0:	9301      	str	r3, [sp, #4]
   b4ba2:	bd08      	pop	{r3, pc}
   b4ba4:	00030240 	.word	0x00030240

000b4ba8 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b4ba8:	b508      	push	{r3, lr}
   b4baa:	4b02      	ldr	r3, [pc, #8]	; (b4bb4 <network_set_listen_timeout+0xc>)
   b4bac:	681b      	ldr	r3, [r3, #0]
   b4bae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b4bb0:	9301      	str	r3, [sp, #4]
   b4bb2:	bd08      	pop	{r3, pc}
   b4bb4:	00030240 	.word	0x00030240

000b4bb8 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b4bb8:	b508      	push	{r3, lr}
   b4bba:	4b02      	ldr	r3, [pc, #8]	; (b4bc4 <network_get_listen_timeout+0xc>)
   b4bbc:	681b      	ldr	r3, [r3, #0]
   b4bbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b4bc0:	9301      	str	r3, [sp, #4]
   b4bc2:	bd08      	pop	{r3, pc}
   b4bc4:	00030240 	.word	0x00030240

000b4bc8 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b4bc8:	b508      	push	{r3, lr}
   b4bca:	4b02      	ldr	r3, [pc, #8]	; (b4bd4 <network_is_on+0xc>)
   b4bcc:	681b      	ldr	r3, [r3, #0]
   b4bce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4bd0:	9301      	str	r3, [sp, #4]
   b4bd2:	bd08      	pop	{r3, pc}
   b4bd4:	00030240 	.word	0x00030240

000b4bd8 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b4bd8:	b508      	push	{r3, lr}
   b4bda:	4b02      	ldr	r3, [pc, #8]	; (b4be4 <network_is_off+0xc>)
   b4bdc:	681b      	ldr	r3, [r3, #0]
   b4bde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b4be0:	9301      	str	r3, [sp, #4]
   b4be2:	bd08      	pop	{r3, pc}
   b4be4:	00030240 	.word	0x00030240

000b4be8 <spark_cloud_flag_connected>:
DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   b4be8:	b508      	push	{r3, lr}
   b4bea:	4b02      	ldr	r3, [pc, #8]	; (b4bf4 <spark_cloud_flag_connected+0xc>)
   b4bec:	681b      	ldr	r3, [r3, #0]
   b4bee:	695b      	ldr	r3, [r3, #20]
   b4bf0:	9301      	str	r3, [sp, #4]
   b4bf2:	bd08      	pop	{r3, pc}
   b4bf4:	00030244 	.word	0x00030244

000b4bf8 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   b4bf8:	b508      	push	{r3, lr}
   b4bfa:	4b02      	ldr	r3, [pc, #8]	; (b4c04 <spark_send_event+0xc>)
   b4bfc:	681b      	ldr	r3, [r3, #0]
   b4bfe:	6a1b      	ldr	r3, [r3, #32]
   b4c00:	9301      	str	r3, [sp, #4]
   b4c02:	bd08      	pop	{r3, pc}
   b4c04:	00030244 	.word	0x00030244

000b4c08 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b4c08:	b508      	push	{r3, lr}
   b4c0a:	4b02      	ldr	r3, [pc, #8]	; (b4c14 <spark_set_random_seed_from_cloud_handler+0xc>)
   b4c0c:	681b      	ldr	r3, [r3, #0]
   b4c0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b4c10:	9301      	str	r3, [sp, #4]
   b4c12:	bd08      	pop	{r3, pc}
   b4c14:	00030244 	.word	0x00030244

000b4c18 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b4c18:	b508      	push	{r3, lr}
   b4c1a:	4b02      	ldr	r3, [pc, #8]	; (b4c24 <malloc+0xc>)
   b4c1c:	681b      	ldr	r3, [r3, #0]
   b4c1e:	681b      	ldr	r3, [r3, #0]
   b4c20:	9301      	str	r3, [sp, #4]
   b4c22:	bd08      	pop	{r3, pc}
   b4c24:	0003021c 	.word	0x0003021c

000b4c28 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b4c28:	b508      	push	{r3, lr}
   b4c2a:	4b02      	ldr	r3, [pc, #8]	; (b4c34 <free+0xc>)
   b4c2c:	681b      	ldr	r3, [r3, #0]
   b4c2e:	685b      	ldr	r3, [r3, #4]
   b4c30:	9301      	str	r3, [sp, #4]
   b4c32:	bd08      	pop	{r3, pc}
   b4c34:	0003021c 	.word	0x0003021c

000b4c38 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b4c38:	b508      	push	{r3, lr}
   b4c3a:	4b02      	ldr	r3, [pc, #8]	; (b4c44 <realloc+0xc>)
   b4c3c:	681b      	ldr	r3, [r3, #0]
   b4c3e:	689b      	ldr	r3, [r3, #8]
   b4c40:	9301      	str	r3, [sp, #4]
   b4c42:	bd08      	pop	{r3, pc}
   b4c44:	0003021c 	.word	0x0003021c

000b4c48 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b4c48:	b508      	push	{r3, lr}
   b4c4a:	4b02      	ldr	r3, [pc, #8]	; (b4c54 <vsnprintf+0xc>)
   b4c4c:	681b      	ldr	r3, [r3, #0]
   b4c4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b4c50:	9301      	str	r3, [sp, #4]
   b4c52:	bd08      	pop	{r3, pc}
   b4c54:	0003021c 	.word	0x0003021c

000b4c58 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   b4c58:	b508      	push	{r3, lr}
   b4c5a:	4b02      	ldr	r3, [pc, #8]	; (b4c64 <abort+0xc>)
   b4c5c:	681b      	ldr	r3, [r3, #0]
   b4c5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b4c60:	9301      	str	r3, [sp, #4]
   b4c62:	bd08      	pop	{r3, pc}
   b4c64:	0003021c 	.word	0x0003021c

000b4c68 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   b4c68:	b508      	push	{r3, lr}
   b4c6a:	4b02      	ldr	r3, [pc, #8]	; (b4c74 <_malloc_r+0xc>)
   b4c6c:	681b      	ldr	r3, [r3, #0]
   b4c6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b4c70:	9301      	str	r3, [sp, #4]
   b4c72:	bd08      	pop	{r3, pc}
   b4c74:	0003021c 	.word	0x0003021c

000b4c78 <__assert_func>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b4c78:	b508      	push	{r3, lr}
   b4c7a:	4b02      	ldr	r3, [pc, #8]	; (b4c84 <__assert_func+0xc>)
   b4c7c:	681b      	ldr	r3, [r3, #0]
   b4c7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4c80:	9301      	str	r3, [sp, #4]
   b4c82:	bd08      	pop	{r3, pc}
   b4c84:	0003021c 	.word	0x0003021c

000b4c88 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b4c88:	b508      	push	{r3, lr}
   b4c8a:	4b02      	ldr	r3, [pc, #8]	; (b4c94 <newlib_impure_ptr_callback+0xc>)
   b4c8c:	681b      	ldr	r3, [r3, #0]
   b4c8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b4c90:	9301      	str	r3, [sp, #4]
   b4c92:	bd08      	pop	{r3, pc}
   b4c94:	0003021c 	.word	0x0003021c

000b4c98 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b4c98:	2200      	movs	r2, #0
   b4c9a:	6840      	ldr	r0, [r0, #4]
   b4c9c:	4611      	mov	r1, r2
   b4c9e:	f7ff bf7b 	b.w	b4b98 <network_listening>

000b4ca2 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b4ca2:	2200      	movs	r2, #0
   b4ca4:	6840      	ldr	r0, [r0, #4]
   b4ca6:	4611      	mov	r1, r2
   b4ca8:	f7ff bf86 	b.w	b4bb8 <network_get_listen_timeout>

000b4cac <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b4cac:	6840      	ldr	r0, [r0, #4]
   b4cae:	2200      	movs	r2, #0
   b4cb0:	f7ff bf7a 	b.w	b4ba8 <network_set_listen_timeout>

000b4cb4 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b4cb4:	6840      	ldr	r0, [r0, #4]
   b4cb6:	2200      	movs	r2, #0
   b4cb8:	f081 0101 	eor.w	r1, r1, #1
   b4cbc:	f7ff bf64 	b.w	b4b88 <network_listen>

000b4cc0 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b4cc0:	2300      	movs	r3, #0
   b4cc2:	6840      	ldr	r0, [r0, #4]
   b4cc4:	461a      	mov	r2, r3
   b4cc6:	4619      	mov	r1, r3
   b4cc8:	f7ff bf56 	b.w	b4b78 <network_off>

000b4ccc <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b4ccc:	2300      	movs	r3, #0
   b4cce:	6840      	ldr	r0, [r0, #4]
   b4cd0:	461a      	mov	r2, r3
   b4cd2:	4619      	mov	r1, r3
   b4cd4:	f7ff bf48 	b.w	b4b68 <network_on>

000b4cd8 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b4cd8:	2200      	movs	r2, #0
   b4cda:	6840      	ldr	r0, [r0, #4]
   b4cdc:	4611      	mov	r1, r2
   b4cde:	f7ff bf3b 	b.w	b4b58 <network_ready>

000b4ce2 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b4ce2:	2200      	movs	r2, #0
   b4ce4:	6840      	ldr	r0, [r0, #4]
   b4ce6:	4611      	mov	r1, r2
   b4ce8:	f7ff bf26 	b.w	b4b38 <network_connecting>

000b4cec <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b4cec:	6840      	ldr	r0, [r0, #4]
   b4cee:	2200      	movs	r2, #0
   b4cf0:	2102      	movs	r1, #2
   b4cf2:	f7ff bf29 	b.w	b4b48 <network_disconnect>

000b4cf6 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b4cf6:	2300      	movs	r3, #0
   b4cf8:	6840      	ldr	r0, [r0, #4]
   b4cfa:	461a      	mov	r2, r3
   b4cfc:	f7ff bf14 	b.w	b4b28 <network_connect>

000b4d00 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b4d00:	4b02      	ldr	r3, [pc, #8]	; (b4d0c <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b4d02:	2203      	movs	r2, #3
   b4d04:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b4d06:	4a02      	ldr	r2, [pc, #8]	; (b4d10 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b4d08:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b4d0a:	4770      	bx	lr
   b4d0c:	2003e6c4 	.word	0x2003e6c4
   b4d10:	000b61c4 	.word	0x000b61c4

000b4d14 <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   b4d14:	2100      	movs	r1, #0
   b4d16:	f7ff be8b 	b.w	b4a30 <hal_spi_release>

000b4d1a <_ZN8SPIClass4lockEv.isra.0>:
    return hal_spi_acquire(_spi, nullptr);
   b4d1a:	2100      	movs	r1, #0
   b4d1c:	f7ff be80 	b.w	b4a20 <hal_spi_acquire>

000b4d20 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   b4d20:	b510      	push	{r4, lr}
   b4d22:	4604      	mov	r4, r0
   b4d24:	4608      	mov	r0, r1
{
    _spi = spi;
   b4d26:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   b4d28:	f7ff fe62 	bl	b49f0 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   b4d2c:	2300      	movs	r3, #0
   b4d2e:	6063      	str	r3, [r4, #4]
}
   b4d30:	4620      	mov	r0, r4
   b4d32:	bd10      	pop	{r4, pc}

000b4d34 <_ZN8SPIClass5beginEt>:
        unlock();
    }
}

void SPIClass::begin(uint16_t ss_pin)
{
   b4d34:	b513      	push	{r0, r1, r4, lr}
   b4d36:	4604      	mov	r4, r0
    if (!lock())
   b4d38:	7800      	ldrb	r0, [r0, #0]
{
   b4d3a:	9101      	str	r1, [sp, #4]
    if (!lock())
   b4d3c:	f7ff ffed 	bl	b4d1a <_ZN8SPIClass4lockEv.isra.0>
   b4d40:	9901      	ldr	r1, [sp, #4]
   b4d42:	b948      	cbnz	r0, b4d58 <_ZN8SPIClass5beginEt+0x24>
   b4d44:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_begin(_spi, ss_pin);
   b4d46:	9001      	str	r0, [sp, #4]
   b4d48:	f7ff fe2a 	bl	b49a0 <hal_spi_begin>
        unlock();
   b4d4c:	9801      	ldr	r0, [sp, #4]
    }
}
   b4d4e:	b002      	add	sp, #8
   b4d50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b4d54:	f7ff bfde 	b.w	b4d14 <_ZN8SPIClass6unlockEv.isra.0>
   b4d58:	b002      	add	sp, #8
   b4d5a:	bd10      	pop	{r4, pc}

000b4d5c <_ZN8SPIClass11setBitOrderEh>:
        unlock();
    }
}

void SPIClass::setBitOrder(uint8_t bitOrder)
{
   b4d5c:	b513      	push	{r0, r1, r4, lr}
   b4d5e:	4604      	mov	r4, r0
    if (!lock())
   b4d60:	7800      	ldrb	r0, [r0, #0]
{
   b4d62:	9101      	str	r1, [sp, #4]
    if (!lock())
   b4d64:	f7ff ffd9 	bl	b4d1a <_ZN8SPIClass4lockEv.isra.0>
   b4d68:	9901      	ldr	r1, [sp, #4]
   b4d6a:	b948      	cbnz	r0, b4d80 <_ZN8SPIClass11setBitOrderEh+0x24>
   b4d6c:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_set_bit_order(_spi, bitOrder);
   b4d6e:	9001      	str	r0, [sp, #4]
   b4d70:	f7ff fe1e 	bl	b49b0 <hal_spi_set_bit_order>
        unlock();
   b4d74:	9801      	ldr	r0, [sp, #4]
    }
}
   b4d76:	b002      	add	sp, #8
   b4d78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b4d7c:	f7ff bfca 	b.w	b4d14 <_ZN8SPIClass6unlockEv.isra.0>
   b4d80:	b002      	add	sp, #8
   b4d82:	bd10      	pop	{r4, pc}

000b4d84 <_ZN8SPIClass11setDataModeEh>:

void SPIClass::setDataMode(uint8_t mode)
{
   b4d84:	b513      	push	{r0, r1, r4, lr}
   b4d86:	4604      	mov	r4, r0
    if (!lock())
   b4d88:	7800      	ldrb	r0, [r0, #0]
{
   b4d8a:	9101      	str	r1, [sp, #4]
    if (!lock())
   b4d8c:	f7ff ffc5 	bl	b4d1a <_ZN8SPIClass4lockEv.isra.0>
   b4d90:	9901      	ldr	r1, [sp, #4]
   b4d92:	b948      	cbnz	r0, b4da8 <_ZN8SPIClass11setDataModeEh+0x24>
   b4d94:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_set_data_mode(_spi, mode);
   b4d96:	9001      	str	r0, [sp, #4]
   b4d98:	f7ff fe12 	bl	b49c0 <hal_spi_set_data_mode>
        unlock();
   b4d9c:	9801      	ldr	r0, [sp, #4]
    }
}
   b4d9e:	b002      	add	sp, #8
   b4da0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b4da4:	f7ff bfb6 	b.w	b4d14 <_ZN8SPIClass6unlockEv.isra.0>
   b4da8:	b002      	add	sp, #8
   b4daa:	bd10      	pop	{r4, pc}

000b4dac <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   b4dac:	0840      	lsrs	r0, r0, #1
{
   b4dae:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   b4db0:	6018      	str	r0, [r3, #0]
   b4db2:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   b4db4:	6818      	ldr	r0, [r3, #0]
   b4db6:	4288      	cmp	r0, r1
   b4db8:	b2e5      	uxtb	r5, r4
   b4dba:	d906      	bls.n	b4dca <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   b4dbc:	3401      	adds	r4, #1
   b4dbe:	2c08      	cmp	r4, #8
   b4dc0:	d002      	beq.n	b4dc8 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   b4dc2:	0840      	lsrs	r0, r0, #1
   b4dc4:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   b4dc6:	e7f5      	b.n	b4db4 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   b4dc8:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   b4dca:	4b02      	ldr	r3, [pc, #8]	; (b4dd4 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   b4dcc:	5d5b      	ldrb	r3, [r3, r5]
   b4dce:	7013      	strb	r3, [r2, #0]
}
   b4dd0:	bd30      	pop	{r4, r5, pc}
   b4dd2:	bf00      	nop
   b4dd4:	000b61f8 	.word	0x000b61f8

000b4dd8 <_ZN8SPIClass13setClockSpeedEjj>:

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
   b4dd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b4ddc:	b088      	sub	sp, #32
    unsigned clock = 0;
   b4dde:	2300      	movs	r3, #0
{
   b4de0:	4604      	mov	r4, r0

    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value * value_scale;

    if (!lock())
   b4de2:	7800      	ldrb	r0, [r0, #0]
    unsigned clock = 0;
   b4de4:	9302      	str	r3, [sp, #8]
{
   b4de6:	460e      	mov	r6, r1
   b4de8:	4617      	mov	r7, r2
    if (!lock())
   b4dea:	f7ff ff96 	bl	b4d1a <_ZN8SPIClass4lockEv.isra.0>
   b4dee:	4605      	mov	r5, r0
   b4df0:	bb00      	cbnz	r0, b4e34 <_ZN8SPIClass13setClockSpeedEjj+0x5c>
    {
        // Query SPI info
        hal_spi_info_t info;
        querySpiInfo(_spi, &info);
   b4df2:	f894 8000 	ldrb.w	r8, [r4]
    memset(info, 0, sizeof(hal_spi_info_t));
   b4df6:	4601      	mov	r1, r0
   b4df8:	2214      	movs	r2, #20
   b4dfa:	a803      	add	r0, sp, #12
   b4dfc:	f001 f859 	bl	b5eb2 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   b4e00:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   b4e02:	462a      	mov	r2, r5
   b4e04:	a903      	add	r1, sp, #12
   b4e06:	4640      	mov	r0, r8
    info->version = HAL_SPI_INFO_VERSION_1;
   b4e08:	f8ad 300c 	strh.w	r3, [sp, #12]
    hal_spi_info(spi, info, nullptr);
   b4e0c:	f7ff fe00 	bl	b4a10 <hal_spi_info>

        // Calculate clock divider
        uint8_t divisor = 0;
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
   b4e10:	9804      	ldr	r0, [sp, #16]
        uint8_t divisor = 0;
   b4e12:	f88d 5007 	strb.w	r5, [sp, #7]
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
   b4e16:	ab02      	add	r3, sp, #8
   b4e18:	f10d 0207 	add.w	r2, sp, #7
   b4e1c:	fb07 f106 	mul.w	r1, r7, r6
   b4e20:	f7ff ffc4 	bl	b4dac <_ZN8SPIClass19computeClockDividerEjjRhRj>

        // Update SPI peripheral
        hal_spi_set_clock_divider(_spi, divisor);
   b4e24:	7820      	ldrb	r0, [r4, #0]
   b4e26:	f89d 1007 	ldrb.w	r1, [sp, #7]
   b4e2a:	f7ff fdd1 	bl	b49d0 <hal_spi_set_clock_divider>
        unlock();
   b4e2e:	7820      	ldrb	r0, [r4, #0]
   b4e30:	f7ff ff70 	bl	b4d14 <_ZN8SPIClass6unlockEv.isra.0>
    }

    return clock;
}
   b4e34:	9802      	ldr	r0, [sp, #8]
   b4e36:	b008      	add	sp, #32
   b4e38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b4e3c <_ZN8SPIClass15setClockDividerEh>:
{
   b4e3c:	b538      	push	{r3, r4, r5, lr}
   b4e3e:	4604      	mov	r4, r0
    if (!lock())
   b4e40:	7800      	ldrb	r0, [r0, #0]
{
   b4e42:	460d      	mov	r5, r1
    if (!lock())
   b4e44:	f7ff ff69 	bl	b4d1a <_ZN8SPIClass4lockEv.isra.0>
   b4e48:	4603      	mov	r3, r0
   b4e4a:	b9d0      	cbnz	r0, b4e82 <_ZN8SPIClass15setClockDividerEh+0x46>
        if (_dividerReference)
   b4e4c:	6861      	ldr	r1, [r4, #4]
   b4e4e:	b199      	cbz	r1, b4e78 <_ZN8SPIClass15setClockDividerEh+0x3c>
   b4e50:	4a0c      	ldr	r2, [pc, #48]	; (b4e84 <_ZN8SPIClass15setClockDividerEh+0x48>)
        if (clock_divisors[result] == divider)
   b4e52:	f812 0b01 	ldrb.w	r0, [r2], #1
   b4e56:	4285      	cmp	r5, r0
   b4e58:	d002      	beq.n	b4e60 <_ZN8SPIClass15setClockDividerEh+0x24>
    for (; result < arraySize(clock_divisors); result++)
   b4e5a:	3301      	adds	r3, #1
   b4e5c:	2b08      	cmp	r3, #8
   b4e5e:	d1f8      	bne.n	b4e52 <_ZN8SPIClass15setClockDividerEh+0x16>
    return result + 1;
   b4e60:	3301      	adds	r3, #1
            unsigned targetSpeed = _dividerReference >> scale;
   b4e62:	b2db      	uxtb	r3, r3
            setClockSpeed(targetSpeed);
   b4e64:	2201      	movs	r2, #1
   b4e66:	40d9      	lsrs	r1, r3
   b4e68:	4620      	mov	r0, r4
   b4e6a:	f7ff ffb5 	bl	b4dd8 <_ZN8SPIClass13setClockSpeedEjj>
        unlock();
   b4e6e:	7820      	ldrb	r0, [r4, #0]
}
   b4e70:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        unlock();
   b4e74:	f7ff bf4e 	b.w	b4d14 <_ZN8SPIClass6unlockEv.isra.0>
            hal_spi_set_clock_divider(_spi, rate);
   b4e78:	7820      	ldrb	r0, [r4, #0]
   b4e7a:	4629      	mov	r1, r5
   b4e7c:	f7ff fda8 	bl	b49d0 <hal_spi_set_clock_divider>
   b4e80:	e7f5      	b.n	b4e6e <_ZN8SPIClass15setClockDividerEh+0x32>
}
   b4e82:	bd38      	pop	{r3, r4, r5, pc}
   b4e84:	000b61f8 	.word	0x000b61f8

000b4e88 <_ZN8SPIClass8transferEh>:

byte SPIClass::transfer(byte _data)
{
   b4e88:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
   b4e8a:	7800      	ldrb	r0, [r0, #0]
   b4e8c:	f7ff fda8 	bl	b49e0 <hal_spi_transfer>
}
   b4e90:	b2c0      	uxtb	r0, r0
   b4e92:	bd08      	pop	{r3, pc}

000b4e94 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b4e94:	4b05      	ldr	r3, [pc, #20]	; (b4eac <_GLOBAL__sub_I_System+0x18>)
   b4e96:	2202      	movs	r2, #2
   b4e98:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b4e9a:	4b05      	ldr	r3, [pc, #20]	; (b4eb0 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b4e9c:	4a05      	ldr	r2, [pc, #20]	; (b4eb4 <_GLOBAL__sub_I_System+0x20>)
   b4e9e:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b4ea0:	2000      	movs	r0, #0
   b4ea2:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b4ea6:	f7ff be0b 	b.w	b4ac0 <set_system_mode>
   b4eaa:	bf00      	nop
   b4eac:	2003e6d8 	.word	0x2003e6d8
   b4eb0:	2003e6cc 	.word	0x2003e6cc
   b4eb4:	ffff0000 	.word	0xffff0000

000b4eb8 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   b4eb8:	b510      	push	{r4, lr}
   b4eba:	4604      	mov	r4, r0
{
	free(buffer);
   b4ebc:	6800      	ldr	r0, [r0, #0]
   b4ebe:	f7ff feb3 	bl	b4c28 <free>
}
   b4ec2:	4620      	mov	r0, r4
   b4ec4:	bd10      	pop	{r4, pc}

000b4ec6 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   b4ec6:	b510      	push	{r4, lr}
   b4ec8:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   b4eca:	6800      	ldr	r0, [r0, #0]
   b4ecc:	b108      	cbz	r0, b4ed2 <_ZN6String10invalidateEv+0xc>
   b4ece:	f7ff feab 	bl	b4c28 <free>
	buffer = NULL;
   b4ed2:	2300      	movs	r3, #0
	capacity = len = 0;
   b4ed4:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   b4ed8:	6023      	str	r3, [r4, #0]
}
   b4eda:	bd10      	pop	{r4, pc}

000b4edc <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   b4edc:	b538      	push	{r3, r4, r5, lr}
   b4ede:	4604      	mov	r4, r0
   b4ee0:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   b4ee2:	6800      	ldr	r0, [r0, #0]
   b4ee4:	3101      	adds	r1, #1
   b4ee6:	f7ff fea7 	bl	b4c38 <realloc>
	if (newbuffer) {
   b4eea:	b110      	cbz	r0, b4ef2 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   b4eec:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   b4ef0:	2001      	movs	r0, #1
	}
	return 0;
}
   b4ef2:	bd38      	pop	{r3, r4, r5, pc}

000b4ef4 <_ZN6String7reserveEj>:
{
   b4ef4:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   b4ef6:	6803      	ldr	r3, [r0, #0]
{
   b4ef8:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   b4efa:	b123      	cbz	r3, b4f06 <_ZN6String7reserveEj+0x12>
   b4efc:	6843      	ldr	r3, [r0, #4]
   b4efe:	428b      	cmp	r3, r1
   b4f00:	d301      	bcc.n	b4f06 <_ZN6String7reserveEj+0x12>
   b4f02:	2001      	movs	r0, #1
}
   b4f04:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   b4f06:	4620      	mov	r0, r4
   b4f08:	f7ff ffe8 	bl	b4edc <_ZN6String12changeBufferEj>
   b4f0c:	2800      	cmp	r0, #0
   b4f0e:	d0f9      	beq.n	b4f04 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   b4f10:	68a3      	ldr	r3, [r4, #8]
   b4f12:	2b00      	cmp	r3, #0
   b4f14:	d1f5      	bne.n	b4f02 <_ZN6String7reserveEj+0xe>
   b4f16:	6822      	ldr	r2, [r4, #0]
   b4f18:	7013      	strb	r3, [r2, #0]
   b4f1a:	e7f2      	b.n	b4f02 <_ZN6String7reserveEj+0xe>

000b4f1c <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   b4f1c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b4f1e:	460d      	mov	r5, r1
	if (!reserve(length)) {
   b4f20:	4611      	mov	r1, r2
   b4f22:	9201      	str	r2, [sp, #4]
{
   b4f24:	4604      	mov	r4, r0
	if (!reserve(length)) {
   b4f26:	f7ff ffe5 	bl	b4ef4 <_ZN6String7reserveEj>
   b4f2a:	9a01      	ldr	r2, [sp, #4]
   b4f2c:	b928      	cbnz	r0, b4f3a <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   b4f2e:	4620      	mov	r0, r4
   b4f30:	f7ff ffc9 	bl	b4ec6 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   b4f34:	4620      	mov	r0, r4
   b4f36:	b003      	add	sp, #12
   b4f38:	bd30      	pop	{r4, r5, pc}
	len = length;
   b4f3a:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   b4f3c:	4629      	mov	r1, r5
   b4f3e:	6820      	ldr	r0, [r4, #0]
   b4f40:	f000 ffa9 	bl	b5e96 <memcpy>
	buffer[len] = 0;
   b4f44:	6822      	ldr	r2, [r4, #0]
   b4f46:	68a3      	ldr	r3, [r4, #8]
   b4f48:	2100      	movs	r1, #0
   b4f4a:	54d1      	strb	r1, [r2, r3]
	return *this;
   b4f4c:	e7f2      	b.n	b4f34 <_ZN6String4copyEPKcj+0x18>

000b4f4e <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   b4f4e:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   b4f50:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   b4f52:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   b4f56:	4604      	mov	r4, r0
	len = 0;
   b4f58:	6083      	str	r3, [r0, #8]
	flags = 0;
   b4f5a:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   b4f5c:	b141      	cbz	r1, b4f70 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   b4f5e:	4608      	mov	r0, r1
   b4f60:	9101      	str	r1, [sp, #4]
   b4f62:	f000 fffa 	bl	b5f5a <strlen>
   b4f66:	9901      	ldr	r1, [sp, #4]
   b4f68:	4602      	mov	r2, r0
   b4f6a:	4620      	mov	r0, r4
   b4f6c:	f7ff ffd6 	bl	b4f1c <_ZN6String4copyEPKcj>
}
   b4f70:	4620      	mov	r0, r4
   b4f72:	b002      	add	sp, #8
   b4f74:	bd10      	pop	{r4, pc}
	...

000b4f78 <_ZN6String6formatEPKcz>:
    StringPrintableHelper help(*this);
    printable.printTo(help);
}

String String::format(const char* fmt, ...)
{
   b4f78:	b40e      	push	{r1, r2, r3}
   b4f7a:	b570      	push	{r4, r5, r6, lr}
   b4f7c:	b087      	sub	sp, #28
   b4f7e:	ad0b      	add	r5, sp, #44	; 0x2c
   b4f80:	4604      	mov	r4, r0
   b4f82:	f855 2b04 	ldr.w	r2, [r5], #4
    va_list marker;
    va_start(marker, fmt);
    const int bufsize = 5;
    char test[bufsize];
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   b4f86:	9201      	str	r2, [sp, #4]
   b4f88:	462b      	mov	r3, r5
   b4f8a:	2105      	movs	r1, #5
   b4f8c:	a804      	add	r0, sp, #16
    va_start(marker, fmt);
   b4f8e:	9503      	str	r5, [sp, #12]
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   b4f90:	f7ff fe5a 	bl	b4c48 <vsnprintf>
    va_end(marker);

    String result;
   b4f94:	490b      	ldr	r1, [pc, #44]	; (b4fc4 <_ZN6String6formatEPKcz+0x4c>)
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   b4f96:	4606      	mov	r6, r0
    String result;
   b4f98:	4620      	mov	r0, r4
   b4f9a:	f7ff ffd8 	bl	b4f4e <_ZN6StringC1EPK19__FlashStringHelper>
    result.reserve(n);  // internally adds +1 for null terminator
   b4f9e:	4631      	mov	r1, r6
   b4fa0:	4620      	mov	r0, r4
   b4fa2:	f7ff ffa7 	bl	b4ef4 <_ZN6String7reserveEj>
    if (result.buffer) {
   b4fa6:	6820      	ldr	r0, [r4, #0]
   b4fa8:	b130      	cbz	r0, b4fb8 <_ZN6String6formatEPKcz+0x40>
        va_start(marker, fmt);
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   b4faa:	9a01      	ldr	r2, [sp, #4]
        va_start(marker, fmt);
   b4fac:	9503      	str	r5, [sp, #12]
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   b4fae:	462b      	mov	r3, r5
   b4fb0:	1c71      	adds	r1, r6, #1
   b4fb2:	f7ff fe49 	bl	b4c48 <vsnprintf>
        va_end(marker);
        result.len = n;
   b4fb6:	60a0      	str	r0, [r4, #8]
    }
    return result;
}
   b4fb8:	4620      	mov	r0, r4
   b4fba:	b007      	add	sp, #28
   b4fbc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b4fc0:	b003      	add	sp, #12
   b4fc2:	4770      	bx	lr
   b4fc4:	000b60a0 	.word	0x000b60a0

000b4fc8 <_ZNSt14_Function_baseD1Ev>:
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   b4fc8:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   b4fca:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   b4fcc:	4604      	mov	r4, r0
      if (_M_manager)
   b4fce:	b113      	cbz	r3, b4fd6 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b4fd0:	2203      	movs	r2, #3
   b4fd2:	4601      	mov	r1, r0
   b4fd4:	4798      	blx	r3
    }
   b4fd6:	4620      	mov	r0, r4
   b4fd8:	bd10      	pop	{r4, pc}

000b4fda <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:
    {
   b4fda:	b510      	push	{r4, lr}
      if (--_M_use_count == 0)
   b4fdc:	6843      	ldr	r3, [r0, #4]
   b4fde:	3b01      	subs	r3, #1
    {
   b4fe0:	4604      	mov	r4, r0
      if (--_M_use_count == 0)
   b4fe2:	6043      	str	r3, [r0, #4]
   b4fe4:	b963      	cbnz	r3, b5000 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
          _M_dispose();
   b4fe6:	6803      	ldr	r3, [r0, #0]
   b4fe8:	689b      	ldr	r3, [r3, #8]
   b4fea:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b4fec:	68a3      	ldr	r3, [r4, #8]
   b4fee:	3b01      	subs	r3, #1
   b4ff0:	60a3      	str	r3, [r4, #8]
   b4ff2:	b92b      	cbnz	r3, b5000 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
            _M_destroy();
   b4ff4:	6823      	ldr	r3, [r4, #0]
   b4ff6:	4620      	mov	r0, r4
   b4ff8:	68db      	ldr	r3, [r3, #12]
    }
   b4ffa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   b4ffe:	4718      	bx	r3
    }
   b5000:	bd10      	pop	{r4, pc}

000b5002 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
   b5002:	b510      	push	{r4, lr}
   b5004:	4604      	mov	r4, r0
	if (_M_pi != nullptr)
   b5006:	6800      	ldr	r0, [r0, #0]
   b5008:	b108      	cbz	r0, b500e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0xc>
	  _M_pi->_M_release();
   b500a:	f7ff ffe6 	bl	b4fda <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
      }
   b500e:	4620      	mov	r0, r4
   b5010:	bd10      	pop	{r4, pc}

000b5012 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
#else
    void
#endif
    swap(_Tp& __a, _Tp& __b)
   b5012:	b513      	push	{r0, r1, r4, lr}
   b5014:	460b      	mov	r3, r1
   b5016:	4602      	mov	r2, r0
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b5018:	e9d0 0100 	ldrd	r0, r1, [r0]
   b501c:	466c      	mov	r4, sp
   b501e:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b5022:	e893 0003 	ldmia.w	r3, {r0, r1}
   b5026:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b502a:	e894 0003 	ldmia.w	r4, {r0, r1}
   b502e:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   b5032:	b002      	add	sp, #8
   b5034:	bd10      	pop	{r4, pc}
	...

000b5038 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   b5038:	4802      	ldr	r0, [pc, #8]	; (b5044 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b503a:	2300      	movs	r3, #0
   b503c:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   b503e:	f7ff bc27 	b.w	b4890 <os_mutex_recursive_create>
   b5042:	bf00      	nop
   b5044:	2003e6dc 	.word	0x2003e6dc

000b5048 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b5048:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b504a:	4606      	mov	r6, r0
   b504c:	460d      	mov	r5, r1
  size_t n = 0;
   b504e:	188f      	adds	r7, r1, r2
   b5050:	2400      	movs	r4, #0
  while (size--) {
   b5052:	42bd      	cmp	r5, r7
   b5054:	d00c      	beq.n	b5070 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b5056:	6833      	ldr	r3, [r6, #0]
   b5058:	f815 1b01 	ldrb.w	r1, [r5], #1
   b505c:	689b      	ldr	r3, [r3, #8]
   b505e:	4630      	mov	r0, r6
   b5060:	4798      	blx	r3
     if (chunk>=0)
   b5062:	1e03      	subs	r3, r0, #0
   b5064:	db01      	blt.n	b506a <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b5066:	441c      	add	r4, r3
  while (size--) {
   b5068:	e7f3      	b.n	b5052 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b506a:	2c00      	cmp	r4, #0
   b506c:	bf08      	it	eq
   b506e:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b5070:	4620      	mov	r0, r4
   b5072:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b5074 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   b5074:	b513      	push	{r0, r1, r4, lr}
   b5076:	4604      	mov	r4, r0
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
   b5078:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b507a:	b159      	cbz	r1, b5094 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b507c:	9101      	str	r1, [sp, #4]
   b507e:	f000 ff6c 	bl	b5f5a <strlen>
   b5082:	6823      	ldr	r3, [r4, #0]
   b5084:	9901      	ldr	r1, [sp, #4]
   b5086:	68db      	ldr	r3, [r3, #12]
   b5088:	4602      	mov	r2, r0
   b508a:	4620      	mov	r0, r4
    }
   b508c:	b002      	add	sp, #8
   b508e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b5092:	4718      	bx	r3
    }
   b5094:	b002      	add	sp, #8
   b5096:	bd10      	pop	{r4, pc}

000b5098 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   b5098:	b508      	push	{r3, lr}
  return write(str);
   b509a:	f7ff ffeb 	bl	b5074 <_ZN5Print5writeEPKc>
}
   b509e:	bd08      	pop	{r3, pc}

000b50a0 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   b50a0:	6803      	ldr	r3, [r0, #0]
   b50a2:	689b      	ldr	r3, [r3, #8]
   b50a4:	4718      	bx	r3

000b50a6 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   b50a6:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   b50a8:	210d      	movs	r1, #13
{
   b50aa:	4605      	mov	r5, r0
  size_t n = print('\r');
   b50ac:	f7ff fff8 	bl	b50a0 <_ZN5Print5printEc>
  n += print('\n');
   b50b0:	210a      	movs	r1, #10
  size_t n = print('\r');
   b50b2:	4604      	mov	r4, r0
  n += print('\n');
   b50b4:	4628      	mov	r0, r5
   b50b6:	f7ff fff3 	bl	b50a0 <_ZN5Print5printEc>
  return n;
}
   b50ba:	4420      	add	r0, r4
   b50bc:	bd38      	pop	{r3, r4, r5, pc}

000b50be <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   b50be:	b538      	push	{r3, r4, r5, lr}
   b50c0:	4605      	mov	r5, r0
  return write(str);
   b50c2:	f7ff ffd7 	bl	b5074 <_ZN5Print5writeEPKc>
   b50c6:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   b50c8:	4628      	mov	r0, r5
   b50ca:	f7ff ffec 	bl	b50a6 <_ZN5Print7printlnEv>
  return n;
}
   b50ce:	4420      	add	r0, r4
   b50d0:	bd38      	pop	{r3, r4, r5, pc}

000b50d2 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b50d2:	b530      	push	{r4, r5, lr}
   b50d4:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b50d6:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b50d8:	2a01      	cmp	r2, #1
  *str = '\0';
   b50da:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b50de:	bf98      	it	ls
   b50e0:	220a      	movls	r2, #10
   b50e2:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b50e4:	460d      	mov	r5, r1
   b50e6:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b50ea:	fb01 5312 	mls	r3, r1, r2, r5
   b50ee:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b50f2:	2b09      	cmp	r3, #9
   b50f4:	bf94      	ite	ls
   b50f6:	3330      	addls	r3, #48	; 0x30
   b50f8:	3337      	addhi	r3, #55	; 0x37
   b50fa:	b2db      	uxtb	r3, r3
  } while(n);
   b50fc:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b50fe:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b5102:	d9ef      	bls.n	b50e4 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b5104:	4621      	mov	r1, r4
   b5106:	f7ff ffb5 	bl	b5074 <_ZN5Print5writeEPKc>
}
   b510a:	b00b      	add	sp, #44	; 0x2c
   b510c:	bd30      	pop	{r4, r5, pc}
	...

000b5110 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b5110:	4b01      	ldr	r3, [pc, #4]	; (b5118 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b5112:	4a02      	ldr	r2, [pc, #8]	; (b511c <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b5114:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b5116:	4770      	bx	lr
   b5118:	2003e6e0 	.word	0x2003e6e0
   b511c:	000b6200 	.word	0x000b6200

000b5120 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b5120:	4b02      	ldr	r3, [pc, #8]	; (b512c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b5122:	681a      	ldr	r2, [r3, #0]
   b5124:	4b02      	ldr	r3, [pc, #8]	; (b5130 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b5126:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b5128:	4770      	bx	lr
   b512a:	bf00      	nop
   b512c:	2003e5f4 	.word	0x2003e5f4
   b5130:	2003e6e4 	.word	0x2003e6e4

000b5134 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b5134:	2100      	movs	r1, #0
   b5136:	f7ff bccb 	b.w	b4ad0 <system_delay_ms>
	...

000b513c <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   b513c:	4b01      	ldr	r3, [pc, #4]	; (b5144 <_GLOBAL__sub_I_RGB+0x8>)
   b513e:	2200      	movs	r2, #0
   b5140:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b5142:	4770      	bx	lr
   b5144:	2003e6e8 	.word	0x2003e6e8

000b5148 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b5148:	4b01      	ldr	r3, [pc, #4]	; (b5150 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b514a:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b514c:	4770      	bx	lr
   b514e:	bf00      	nop
   b5150:	2003e5f8 	.word	0x2003e5f8

000b5154 <serialEventRun>:
{
   b5154:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b5156:	4b0b      	ldr	r3, [pc, #44]	; (b5184 <serialEventRun+0x30>)
   b5158:	b143      	cbz	r3, b516c <serialEventRun+0x18>
   b515a:	f000 fc05 	bl	b5968 <_Z16_fetch_usbserialv>
   b515e:	6803      	ldr	r3, [r0, #0]
   b5160:	691b      	ldr	r3, [r3, #16]
   b5162:	4798      	blx	r3
   b5164:	2800      	cmp	r0, #0
   b5166:	dd01      	ble.n	b516c <serialEventRun+0x18>
        serialEvent();
   b5168:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b516c:	4b06      	ldr	r3, [pc, #24]	; (b5188 <serialEventRun+0x34>)
   b516e:	b143      	cbz	r3, b5182 <serialEventRun+0x2e>
   b5170:	f000 fe26 	bl	b5dc0 <_Z22__fetch_global_Serial1v>
   b5174:	6803      	ldr	r3, [r0, #0]
   b5176:	691b      	ldr	r3, [r3, #16]
   b5178:	4798      	blx	r3
   b517a:	2800      	cmp	r0, #0
   b517c:	dd01      	ble.n	b5182 <serialEventRun+0x2e>
        serialEvent1();
   b517e:	f3af 8000 	nop.w
}
   b5182:	bd08      	pop	{r3, pc}
	...

000b518c <_post_loop>:
{
   b518c:	b508      	push	{r3, lr}
	serialEventRun();
   b518e:	f7ff ffe1 	bl	b5154 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b5192:	f7ff fb75 	bl	b4880 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b5196:	4b01      	ldr	r3, [pc, #4]	; (b519c <_post_loop+0x10>)
   b5198:	6018      	str	r0, [r3, #0]
}
   b519a:	bd08      	pop	{r3, pc}
   b519c:	2003e740 	.word	0x2003e740

000b51a0 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b51a0:	4805      	ldr	r0, [pc, #20]	; (b51b8 <_Z33system_initialize_user_backup_ramv+0x18>)
   b51a2:	4a06      	ldr	r2, [pc, #24]	; (b51bc <_Z33system_initialize_user_backup_ramv+0x1c>)
   b51a4:	4906      	ldr	r1, [pc, #24]	; (b51c0 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b51a6:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b51a8:	1a12      	subs	r2, r2, r0
   b51aa:	f000 fe74 	bl	b5e96 <memcpy>
    __backup_sram_signature = signature;
   b51ae:	4b05      	ldr	r3, [pc, #20]	; (b51c4 <_Z33system_initialize_user_backup_ramv+0x24>)
   b51b0:	4a05      	ldr	r2, [pc, #20]	; (b51c8 <_Z33system_initialize_user_backup_ramv+0x28>)
   b51b2:	601a      	str	r2, [r3, #0]
}
   b51b4:	bd08      	pop	{r3, pc}
   b51b6:	bf00      	nop
   b51b8:	2003f400 	.word	0x2003f400
   b51bc:	2003f404 	.word	0x2003f404
   b51c0:	000b6434 	.word	0x000b6434
   b51c4:	2003f400 	.word	0x2003f400
   b51c8:	9a271c1e 	.word	0x9a271c1e

000b51cc <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b51cc:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b51ce:	2300      	movs	r3, #0
   b51d0:	9300      	str	r3, [sp, #0]
   b51d2:	461a      	mov	r2, r3
   b51d4:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b51d8:	f7ff fc9c 	bl	b4b14 <system_ctrl_set_result>
}
   b51dc:	b003      	add	sp, #12
   b51de:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b51e4 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b51e4:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b51e6:	8843      	ldrh	r3, [r0, #2]
   b51e8:	2b0a      	cmp	r3, #10
   b51ea:	d008      	beq.n	b51fe <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b51ec:	2b50      	cmp	r3, #80	; 0x50
   b51ee:	d10b      	bne.n	b5208 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b51f0:	4b09      	ldr	r3, [pc, #36]	; (b5218 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b51f2:	681b      	ldr	r3, [r3, #0]
   b51f4:	b14b      	cbz	r3, b520a <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b51f6:	b003      	add	sp, #12
   b51f8:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b51fc:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b51fe:	f7ff ffe5 	bl	b51cc <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b5202:	b003      	add	sp, #12
   b5204:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b5208:	2300      	movs	r3, #0
   b520a:	9300      	str	r3, [sp, #0]
   b520c:	461a      	mov	r2, r3
   b520e:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b5212:	f7ff fc7f 	bl	b4b14 <system_ctrl_set_result>
}
   b5216:	e7f4      	b.n	b5202 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b5218:	2003e6fc 	.word	0x2003e6fc

000b521c <module_user_init_hook>:
{
   b521c:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b521e:	4812      	ldr	r0, [pc, #72]	; (b5268 <module_user_init_hook+0x4c>)
   b5220:	2100      	movs	r1, #0
   b5222:	f7ff fd31 	bl	b4c88 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b5226:	4b11      	ldr	r3, [pc, #68]	; (b526c <module_user_init_hook+0x50>)
   b5228:	681a      	ldr	r2, [r3, #0]
   b522a:	4b11      	ldr	r3, [pc, #68]	; (b5270 <module_user_init_hook+0x54>)
   b522c:	429a      	cmp	r2, r3
   b522e:	4b11      	ldr	r3, [pc, #68]	; (b5274 <module_user_init_hook+0x58>)
   b5230:	bf0c      	ite	eq
   b5232:	2201      	moveq	r2, #1
   b5234:	2200      	movne	r2, #0
   b5236:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b5238:	d001      	beq.n	b523e <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b523a:	f7ff ffb1 	bl	b51a0 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b523e:	f7ff fb17 	bl	b4870 <HAL_RNG_GetRandomNumber>
   b5242:	4604      	mov	r4, r0
    srand(seed);
   b5244:	f000 fe3e 	bl	b5ec4 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b5248:	4b0b      	ldr	r3, [pc, #44]	; (b5278 <module_user_init_hook+0x5c>)
   b524a:	b113      	cbz	r3, b5252 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b524c:	4620      	mov	r0, r4
   b524e:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b5252:	2100      	movs	r1, #0
   b5254:	4808      	ldr	r0, [pc, #32]	; (b5278 <module_user_init_hook+0x5c>)
   b5256:	f7ff fcd7 	bl	b4c08 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b525a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b525e:	4807      	ldr	r0, [pc, #28]	; (b527c <module_user_init_hook+0x60>)
   b5260:	2100      	movs	r1, #0
   b5262:	f7ff bc4d 	b.w	b4b00 <system_ctrl_set_app_request_handler>
   b5266:	bf00      	nop
   b5268:	000b5149 	.word	0x000b5149
   b526c:	2003f400 	.word	0x2003f400
   b5270:	9a271c1e 	.word	0x9a271c1e
   b5274:	2003e6f8 	.word	0x2003e6f8
   b5278:	00000000 	.word	0x00000000
   b527c:	000b51e5 	.word	0x000b51e5

000b5280 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   b5280:	4770      	bx	lr

000b5282 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   b5282:	2000      	movs	r0, #0
   b5284:	4770      	bx	lr

000b5286 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   b5286:	b510      	push	{r4, lr}
   b5288:	2110      	movs	r1, #16
   b528a:	4604      	mov	r4, r0
   b528c:	f7fe ff05 	bl	b409a <_ZdlPvj>
   b5290:	4620      	mov	r0, r4
   b5292:	bd10      	pop	{r4, pc}

000b5294 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   b5294:	b508      	push	{r3, lr}
      { delete this; }
   b5296:	f7ff fff6 	bl	b5286 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   b529a:	bd08      	pop	{r3, pc}

000b529c <_ZN8particle5ErrorC1EOS0_>:

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   b529c:	b530      	push	{r4, r5, lr}
        type_(type) {
   b529e:	2200      	movs	r2, #0
   b52a0:	f64f 749c 	movw	r4, #65436	; 0xff9c
   b52a4:	6002      	str	r2, [r0, #0]
   b52a6:	8084      	strh	r4, [r0, #4]
      __a = _GLIBCXX_MOVE(__b);
   b52a8:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   b52aa:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   b52ac:	680c      	ldr	r4, [r1, #0]
   b52ae:	8085      	strh	r5, [r0, #4]
   b52b0:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   b52b2:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
   b52b4:	bd30      	pop	{r4, r5, pc}

000b52b6 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   b52b6:	b510      	push	{r4, lr}
   b52b8:	4604      	mov	r4, r0
    free((void*)msg_);
   b52ba:	6800      	ldr	r0, [r0, #0]
   b52bc:	f7ff fcb4 	bl	b4c28 <free>
}
   b52c0:	4620      	mov	r0, r4
   b52c2:	bd10      	pop	{r4, pc}

000b52c4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   b52c4:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   b52c6:	68c4      	ldr	r4, [r0, #12]
   b52c8:	b1f4      	cbz	r4, b5308 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
   b52ca:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   b52cc:	2b02      	cmp	r3, #2
   b52ce:	d103      	bne.n	b52d8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   b52d0:	f104 000c 	add.w	r0, r4, #12
   b52d4:	f7ff ffef 	bl	b52b6 <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
   b52d8:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
   b52da:	b135      	cbz	r5, b52ea <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   b52dc:	4628      	mov	r0, r5
   b52de:	f7ff fe73 	bl	b4fc8 <_ZNSt14_Function_baseD1Ev>
   b52e2:	2110      	movs	r1, #16
   b52e4:	4628      	mov	r0, r5
   b52e6:	f7fe fed8 	bl	b409a <_ZdlPvj>
   b52ea:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   b52ec:	b135      	cbz	r5, b52fc <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   b52ee:	4628      	mov	r0, r5
   b52f0:	f7ff fe6a 	bl	b4fc8 <_ZNSt14_Function_baseD1Ev>
   b52f4:	2110      	movs	r1, #16
   b52f6:	4628      	mov	r0, r5
   b52f8:	f7fe fecf 	bl	b409a <_ZdlPvj>
   b52fc:	4620      	mov	r0, r4
   b52fe:	2114      	movs	r1, #20
   b5300:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b5304:	f7fe bec9 	b.w	b409a <_ZdlPvj>
   b5308:	bd38      	pop	{r3, r4, r5, pc}

000b530a <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>:
	{
	  _M_refcount._M_swap(__r._M_refcount);
	  __r._M_ptr = 0;
	}

      __shared_ptr(const __shared_ptr&) noexcept = default;
   b530a:	680b      	ldr	r3, [r1, #0]
   b530c:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
   b530e:	684b      	ldr	r3, [r1, #4]
   b5310:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
   b5312:	b113      	cbz	r3, b531a <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_+0x10>
    { ++_M_use_count; }
   b5314:	685a      	ldr	r2, [r3, #4]
   b5316:	3201      	adds	r2, #1
   b5318:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b531a:	4770      	bx	lr

000b531c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   b531c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b531e:	4604      	mov	r4, r0
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b5320:	4668      	mov	r0, sp
   b5322:	460d      	mov	r5, r1
   b5324:	f7ff fff1 	bl	b530a <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   b5328:	9b00      	ldr	r3, [sp, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b532a:	9a01      	ldr	r2, [sp, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   b532c:	6023      	str	r3, [r4, #0]
	_M_pi = __tmp;
   b532e:	6062      	str	r2, [r4, #4]
	__r._M_pi = _M_pi;
   b5330:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   b5332:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
   b5334:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   b5336:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
   b5338:	f7ff fe63 	bl	b5002 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
   b533c:	b135      	cbz	r5, b534c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv+0x30>
   b533e:	1d28      	adds	r0, r5, #4
   b5340:	f7ff fe5f 	bl	b5002 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b5344:	2108      	movs	r1, #8
   b5346:	4628      	mov	r0, r5
   b5348:	f7fe fea7 	bl	b409a <_ZdlPvj>
        return p;
    }
   b534c:	4620      	mov	r0, r4
   b534e:	b003      	add	sp, #12
   b5350:	bd30      	pop	{r4, r5, pc}

000b5352 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   b5352:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b5354:	b510      	push	{r4, lr}
      if (_M_empty())
   b5356:	b90a      	cbnz	r2, b535c <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   b5358:	f000 fd94 	bl	b5e84 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
    }
   b535c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b5360:	68c3      	ldr	r3, [r0, #12]
   b5362:	4718      	bx	r3

000b5364 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b5364:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   b5366:	6800      	ldr	r0, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   b5368:	f100 0110 	add.w	r1, r0, #16
   b536c:	f7ff fff1 	bl	b5352 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
   b5370:	bd08      	pop	{r3, pc}

000b5372 <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
   b5372:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b5374:	b510      	push	{r4, lr}
      if (_M_empty())
   b5376:	b90a      	cbnz	r2, b537c <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   b5378:	f000 fd84 	bl	b5e84 <_ZSt25__throw_bad_function_callv>
    }
   b537c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b5380:	68c3      	ldr	r3, [r0, #12]
   b5382:	4718      	bx	r3

000b5384 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b5384:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   b5386:	6800      	ldr	r0, [r0, #0]
   b5388:	f100 0110 	add.w	r1, r0, #16
   b538c:	f7ff fff1 	bl	b5372 <_ZNKSt8functionIFvRKbEEclES1_>
      }
   b5390:	bd08      	pop	{r3, pc}
	...

000b5394 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   b5394:	b538      	push	{r3, r4, r5, lr}
   b5396:	2300      	movs	r3, #0
   b5398:	4604      	mov	r4, r0
   b539a:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b539c:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   b539e:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b53a0:	f7fe fe77 	bl	b4092 <_Znwj>
   b53a4:	b128      	cbz	r0, b53b2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   b53a6:	2301      	movs	r3, #1
   b53a8:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   b53ac:	4b02      	ldr	r3, [pc, #8]	; (b53b8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   b53ae:	6003      	str	r3, [r0, #0]
   b53b0:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b53b2:	6020      	str	r0, [r4, #0]
	}
   b53b4:	4620      	mov	r0, r4
   b53b6:	bd38      	pop	{r3, r4, r5, pc}
   b53b8:	000b6228 	.word	0x000b6228

000b53bc <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   b53bc:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b53be:	2300      	movs	r3, #0
   b53c0:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   b53c2:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   b53c4:	4604      	mov	r4, r0
   b53c6:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   b53c8:	b12b      	cbz	r3, b53d6 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b53ca:	2202      	movs	r2, #2
   b53cc:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b53ce:	68eb      	ldr	r3, [r5, #12]
   b53d0:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b53d2:	68ab      	ldr	r3, [r5, #8]
   b53d4:	60a3      	str	r3, [r4, #8]
    }
   b53d6:	4620      	mov	r0, r4
   b53d8:	bd38      	pop	{r3, r4, r5, pc}
	...

000b53dc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
   b53dc:	b5f0      	push	{r4, r5, r6, r7, lr}
   b53de:	b089      	sub	sp, #36	; 0x24
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
   b53e0:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   b53e2:	4668      	mov	r0, sp
   b53e4:	f7ff ff5a 	bl	b529c <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
   b53e8:	f04f 0302 	mov.w	r3, #2
   b53ec:	e8d4 2f4f 	ldrexb	r2, [r4]
   b53f0:	2a00      	cmp	r2, #0
   b53f2:	d103      	bne.n	b53fc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   b53f4:	e8c4 3f41 	strexb	r1, r3, [r4]
   b53f8:	2900      	cmp	r1, #0
   b53fa:	d1f7      	bne.n	b53ec <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
   b53fc:	d125      	bne.n	b544a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
   b53fe:	f104 050c 	add.w	r5, r4, #12
   b5402:	4669      	mov	r1, sp
   b5404:	4628      	mov	r0, r5
   b5406:	f7ff ff49 	bl	b529c <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
   b540a:	f3bf 8f5b 	dmb	ish
   b540e:	2301      	movs	r3, #1
   b5410:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   b5412:	2000      	movs	r0, #0
   b5414:	f104 0308 	add.w	r3, r4, #8
   b5418:	f3bf 8f5b 	dmb	ish
   b541c:	e853 6f00 	ldrex	r6, [r3]
   b5420:	e843 0200 	strex	r2, r0, [r3]
   b5424:	2a00      	cmp	r2, #0
   b5426:	d1f9      	bne.n	b541c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
   b5428:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   b542c:	b16e      	cbz	r6, b544a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
   b542e:	f7ff fb57 	bl	b4ae0 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   b5432:	b178      	cbz	r0, b5454 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   b5434:	4629      	mov	r1, r5
   b5436:	4630      	mov	r0, r6
   b5438:	f7ff ff8b 	bl	b5352 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
   b543c:	4630      	mov	r0, r6
   b543e:	f7ff fdc3 	bl	b4fc8 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   b5442:	2110      	movs	r1, #16
   b5444:	4630      	mov	r0, r6
   b5446:	f7fe fe28 	bl	b409a <_ZdlPvj>
        p_->setError(std::move(error));
   b544a:	4668      	mov	r0, sp
   b544c:	f7ff ff33 	bl	b52b6 <_ZN8particle5ErrorD1Ev>
    }
   b5450:	b009      	add	sp, #36	; 0x24
   b5452:	bdf0      	pop	{r4, r5, r6, r7, pc}

     public:
      template<typename... _Args>
	explicit _GLIBCXX20_CONSTEXPR
	_Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   b5454:	4631      	mov	r1, r6
   b5456:	a802      	add	r0, sp, #8
   b5458:	f7ff ffb0 	bl	b53bc <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   b545c:	68e0      	ldr	r0, [r4, #12]
   b545e:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b5462:	b108      	cbz	r0, b5468 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
   b5464:	f000 fd5c 	bl	b5f20 <strdup>
        type_(type) {
   b5468:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   b546a:	2010      	movs	r0, #16
   b546c:	f8ad 501c 	strh.w	r5, [sp, #28]
   b5470:	f7fe fe0f 	bl	b4092 <_Znwj>
   b5474:	4605      	mov	r5, r0
   b5476:	b1e8      	cbz	r0, b54b4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
   b5478:	2700      	movs	r7, #0
   b547a:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b547c:	2018      	movs	r0, #24
   b547e:	f7fe fe08 	bl	b4092 <_Znwj>
   b5482:	4604      	mov	r4, r0
   b5484:	b188      	cbz	r0, b54aa <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
   b5486:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
   b5488:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   b548a:	a802      	add	r0, sp, #8
   b548c:	f7ff fdc1 	bl	b5012 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b5490:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   b5492:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b5494:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b5496:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   b5498:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b549a:	a906      	add	r1, sp, #24
   b549c:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b549e:	60e3      	str	r3, [r4, #12]
   b54a0:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
   b54a4:	9205      	str	r2, [sp, #20]
   b54a6:	f7ff fef9 	bl	b529c <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
   b54aa:	4b08      	ldr	r3, [pc, #32]	; (b54cc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
   b54ac:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   b54ae:	4b08      	ldr	r3, [pc, #32]	; (b54d0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b54b0:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   b54b2:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
   b54b4:	a806      	add	r0, sp, #24
   b54b6:	f7ff fefe 	bl	b52b6 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   b54ba:	a802      	add	r0, sp, #8
   b54bc:	f7ff fd84 	bl	b4fc8 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   b54c0:	2200      	movs	r2, #0
   b54c2:	4629      	mov	r1, r5
   b54c4:	4803      	ldr	r0, [pc, #12]	; (b54d4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
   b54c6:	f7ff fb13 	bl	b4af0 <application_thread_invoke>
   b54ca:	e7b7      	b.n	b543c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
   b54cc:	000b5365 	.word	0x000b5365
   b54d0:	000b55e9 	.word	0x000b55e9
   b54d4:	000b5a59 	.word	0x000b5a59

000b54d8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   b54d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b54dc:	b08b      	sub	sp, #44	; 0x2c
   b54de:	4605      	mov	r5, r0
   b54e0:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
   b54e4:	460f      	mov	r7, r1
   b54e6:	4690      	mov	r8, r2
   b54e8:	4699      	mov	r9, r3
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   b54ea:	f7ff fb7d 	bl	b4be8 <spark_cloud_flag_connected>
   b54ee:	ae07      	add	r6, sp, #28
    if (!connected()) {
   b54f0:	4683      	mov	fp, r0
   b54f2:	bb38      	cbnz	r0, b5544 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
   b54f4:	f64f 732e 	movw	r3, #65326	; 0xff2e
   b54f8:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   b54fa:	a905      	add	r1, sp, #20
   b54fc:	4630      	mov	r0, r6
   b54fe:	f8ad 3018 	strh.w	r3, [sp, #24]
   b5502:	f7ff fecb 	bl	b529c <_ZN8particle5ErrorC1EOS0_>
   b5506:	2014      	movs	r0, #20
   b5508:	f7fe fdc3 	bl	b4092 <_Znwj>
   b550c:	4604      	mov	r4, r0
   b550e:	b148      	cbz	r0, b5524 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   b5510:	2302      	movs	r3, #2
   b5512:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b5514:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   b5516:	e9c0 bb01 	strd	fp, fp, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b551a:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
   b551c:	4631      	mov	r1, r6
   b551e:	300c      	adds	r0, #12
   b5520:	f7ff febc 	bl	b529c <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b5524:	4628      	mov	r0, r5
	: __shared_count(__p)
   b5526:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b5528:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
   b552c:	f7ff ff32 	bl	b5394 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   b5530:	4630      	mov	r0, r6
   b5532:	f7ff fec0 	bl	b52b6 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   b5536:	a805      	add	r0, sp, #20
   b5538:	f7ff febd 	bl	b52b6 <_ZN8particle5ErrorD1Ev>
        p.setError(Error::UNKNOWN);
        p.fromDataPtr(d.handler_data); // Free wrapper object
    }

    return p.future();
}
   b553c:	4628      	mov	r0, r5
   b553e:	b00b      	add	sp, #44	; 0x2c
   b5540:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d.size = sizeof(spark_send_event_data);
   b5544:	230c      	movs	r3, #12
    spark_send_event_data d = {};
   b5546:	2400      	movs	r4, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   b5548:	2014      	movs	r0, #20
   b554a:	e9cd 4408 	strd	r4, r4, [sp, #32]
    d.size = sizeof(spark_send_event_data);
   b554e:	9307      	str	r3, [sp, #28]
   b5550:	f7fe fd9f 	bl	b4092 <_Znwj>
   b5554:	4601      	mov	r1, r0
   b5556:	b118      	cbz	r0, b5560 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x88>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   b5558:	e9c0 4401 	strd	r4, r4, [r0, #4]
   b555c:	7004      	strb	r4, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b555e:	7044      	strb	r4, [r0, #1]
   b5560:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b5562:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
   b5564:	f7ff ff16 	bl	b5394 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
   b5568:	4b1e      	ldr	r3, [pc, #120]	; (b55e4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x10c>)
   b556a:	9308      	str	r3, [sp, #32]
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   b556c:	2008      	movs	r0, #8
   b556e:	f7fe fd90 	bl	b4092 <_Znwj>
   b5572:	4604      	mov	r4, r0
   b5574:	b110      	cbz	r0, b557c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa4>
   b5576:	a903      	add	r1, sp, #12
   b5578:	f7ff fec7 	bl	b530a <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   b557c:	9600      	str	r6, [sp, #0]
   b557e:	fa5f f38a 	uxtb.w	r3, sl
   b5582:	464a      	mov	r2, r9
   b5584:	4641      	mov	r1, r8
   b5586:	4638      	mov	r0, r7
    d.handler_data = p.dataPtr();
   b5588:	9409      	str	r4, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   b558a:	f7ff fb35 	bl	b4bf8 <spark_send_event>
   b558e:	b9b8      	cbnz	r0, b55c0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
	return __atomic_load_n(&_M_i, int(__m));
   b5590:	9b03      	ldr	r3, [sp, #12]
   b5592:	785b      	ldrb	r3, [r3, #1]
   b5594:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   b5598:	b993      	cbnz	r3, b55c0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
   b559a:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
   b559e:	a905      	add	r1, sp, #20
   b55a0:	a803      	add	r0, sp, #12
   b55a2:	9205      	str	r2, [sp, #20]
   b55a4:	f8ad 3018 	strh.w	r3, [sp, #24]
   b55a8:	f7ff ff18 	bl	b53dc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   b55ac:	a805      	add	r0, sp, #20
   b55ae:	f7ff fe82 	bl	b52b6 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   b55b2:	a805      	add	r0, sp, #20
   b55b4:	9909      	ldr	r1, [sp, #36]	; 0x24
   b55b6:	f7ff feb1 	bl	b531c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
   b55ba:	a806      	add	r0, sp, #24
   b55bc:	f7ff fd21 	bl	b5002 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b55c0:	a903      	add	r1, sp, #12
   b55c2:	a805      	add	r0, sp, #20
   b55c4:	f7ff fea1 	bl	b530a <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   b55c8:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b55ca:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
   b55cc:	602b      	str	r3, [r5, #0]
	_M_pi = __tmp;
   b55ce:	606a      	str	r2, [r5, #4]
	__r._M_pi = _M_pi;
   b55d0:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   b55d2:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
   b55d4:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
   b55d6:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
   b55d8:	f7ff fd13 	bl	b5002 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b55dc:	a804      	add	r0, sp, #16
   b55de:	f7ff fd10 	bl	b5002 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
   b55e2:	e7ab      	b.n	b553c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
   b55e4:	000b5665 	.word	0x000b5665

000b55e8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	switch (__op)
   b55e8:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b55ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b55ec:	4605      	mov	r5, r0
	switch (__op)
   b55ee:	d103      	bne.n	b55f8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   b55f0:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b55f2:	6003      	str	r3, [r0, #0]
      }
   b55f4:	2000      	movs	r0, #0
   b55f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	  switch (__op)
   b55f8:	2a02      	cmp	r2, #2
   b55fa:	d010      	beq.n	b561e <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
   b55fc:	2a03      	cmp	r2, #3
   b55fe:	d1f9      	bne.n	b55f4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   b5600:	6804      	ldr	r4, [r0, #0]
   b5602:	2c00      	cmp	r4, #0
   b5604:	d0f6      	beq.n	b55f4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
   b5606:	f104 0010 	add.w	r0, r4, #16
   b560a:	f7ff fe54 	bl	b52b6 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   b560e:	4620      	mov	r0, r4
   b5610:	f7ff fcda 	bl	b4fc8 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   b5614:	2118      	movs	r1, #24
   b5616:	4620      	mov	r0, r4
   b5618:	f7fe fd3f 	bl	b409a <_ZdlPvj>
   b561c:	e7ea      	b.n	b55f4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   b561e:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
   b5620:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b5622:	f7fe fd36 	bl	b4092 <_Znwj>
   b5626:	4604      	mov	r4, r0
   b5628:	b150      	cbz	r0, b5640 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x58>
	explicit _GLIBCXX20_CONSTEXPR
	_Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   b562a:	4631      	mov	r1, r6
   b562c:	f7ff fec6 	bl	b53bc <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   b5630:	6930      	ldr	r0, [r6, #16]
   b5632:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b5636:	b108      	cbz	r0, b563c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>
   b5638:	f000 fc72 	bl	b5f20 <strdup>
        type_(type) {
   b563c:	6120      	str	r0, [r4, #16]
   b563e:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
   b5640:	602c      	str	r4, [r5, #0]
	}
   b5642:	e7d7      	b.n	b55f4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>

000b5644 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   b5644:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b5646:	2300      	movs	r3, #0
   b5648:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   b564a:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   b564c:	4604      	mov	r4, r0
   b564e:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   b5650:	b12b      	cbz	r3, b565e <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b5652:	2202      	movs	r2, #2
   b5654:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b5656:	68eb      	ldr	r3, [r5, #12]
   b5658:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b565a:	68ab      	ldr	r3, [r5, #8]
   b565c:	60a3      	str	r3, [r4, #8]
    }
   b565e:	4620      	mov	r0, r4
   b5660:	bd38      	pop	{r3, r4, r5, pc}
	...

000b5664 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   b5664:	b5f0      	push	{r4, r5, r6, r7, lr}
   b5666:	b089      	sub	sp, #36	; 0x24
   b5668:	4604      	mov	r4, r0
   b566a:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   b566c:	a801      	add	r0, sp, #4
   b566e:	4611      	mov	r1, r2
   b5670:	f7ff fe54 	bl	b531c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   b5674:	b1a4      	cbz	r4, b56a0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
   b5676:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b5678:	b11d      	cbz	r5, b5682 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
   b567a:	4628      	mov	r0, r5
   b567c:	f000 fc50 	bl	b5f20 <strdup>
   b5680:	4605      	mov	r5, r0
   b5682:	a801      	add	r0, sp, #4
   b5684:	a903      	add	r1, sp, #12
        type_(type) {
   b5686:	9503      	str	r5, [sp, #12]
   b5688:	f8ad 4010 	strh.w	r4, [sp, #16]
   b568c:	f7ff fea6 	bl	b53dc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   b5690:	a803      	add	r0, sp, #12
   b5692:	f7ff fe10 	bl	b52b6 <_ZN8particle5ErrorD1Ev>
   b5696:	a802      	add	r0, sp, #8
   b5698:	f7ff fcb3 	bl	b5002 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b569c:	b009      	add	sp, #36	; 0x24
   b569e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return _M_ptr; }
   b56a0:	9d01      	ldr	r5, [sp, #4]
	return __atomic_compare_exchange(std::__addressof(_M_i),
   b56a2:	2301      	movs	r3, #1
   b56a4:	e8d5 2f4f 	ldrexb	r2, [r5]
   b56a8:	2a00      	cmp	r2, #0
   b56aa:	d103      	bne.n	b56b4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
   b56ac:	e8c5 3f41 	strexb	r1, r3, [r5]
   b56b0:	2900      	cmp	r1, #0
   b56b2:	d1f7      	bne.n	b56a4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
   b56b4:	d1ef      	bne.n	b5696 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
   b56b6:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
   b56b8:	f3bf 8f5b 	dmb	ish
   b56bc:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   b56be:	1d2b      	adds	r3, r5, #4
   b56c0:	f3bf 8f5b 	dmb	ish
   b56c4:	e853 6f00 	ldrex	r6, [r3]
   b56c8:	e843 4200 	strex	r2, r4, [r3]
   b56cc:	2a00      	cmp	r2, #0
   b56ce:	d1f9      	bne.n	b56c4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
   b56d0:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   b56d4:	2e00      	cmp	r6, #0
   b56d6:	d0de      	beq.n	b5696 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
   b56d8:	4620      	mov	r0, r4
   b56da:	f7ff fa01 	bl	b4ae0 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   b56de:	4607      	mov	r7, r0
   b56e0:	b160      	cbz	r0, b56fc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   b56e2:	f105 010c 	add.w	r1, r5, #12
   b56e6:	4630      	mov	r0, r6
   b56e8:	f7ff fe43 	bl	b5372 <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
   b56ec:	4630      	mov	r0, r6
   b56ee:	f7ff fc6b 	bl	b4fc8 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   b56f2:	2110      	movs	r1, #16
   b56f4:	4630      	mov	r0, r6
   b56f6:	f7fe fcd0 	bl	b409a <_ZdlPvj>
   b56fa:	e7cc      	b.n	b5696 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   b56fc:	4631      	mov	r1, r6
   b56fe:	a803      	add	r0, sp, #12
   b5700:	f7ff ffa0 	bl	b5644 <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b5704:	7b2b      	ldrb	r3, [r5, #12]
   b5706:	f88d 301c 	strb.w	r3, [sp, #28]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   b570a:	2010      	movs	r0, #16
   b570c:	f7fe fcc1 	bl	b4092 <_Znwj>
   b5710:	4605      	mov	r5, r0
   b5712:	b1d0      	cbz	r0, b574a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
   b5714:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b5716:	2014      	movs	r0, #20
   b5718:	f7fe fcbb 	bl	b4092 <_Znwj>
   b571c:	4604      	mov	r4, r0
   b571e:	b178      	cbz	r0, b5740 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
    _Function_base() : _M_manager(nullptr) { }
   b5720:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   b5722:	4601      	mov	r1, r0
   b5724:	a803      	add	r0, sp, #12
   b5726:	f7ff fc74 	bl	b5012 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b572a:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   b572c:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b572e:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b5730:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   b5732:	9205      	str	r2, [sp, #20]
   b5734:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b5736:	60e3      	str	r3, [r4, #12]
   b5738:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   b573c:	9206      	str	r2, [sp, #24]
   b573e:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   b5740:	4b06      	ldr	r3, [pc, #24]	; (b575c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
   b5742:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   b5744:	4b06      	ldr	r3, [pc, #24]	; (b5760 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b5746:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   b5748:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
   b574a:	a803      	add	r0, sp, #12
   b574c:	f7ff fc3c 	bl	b4fc8 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   b5750:	2200      	movs	r2, #0
   b5752:	4629      	mov	r1, r5
   b5754:	4803      	ldr	r0, [pc, #12]	; (b5764 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
   b5756:	f7ff f9cb 	bl	b4af0 <application_thread_invoke>
   b575a:	e7c7      	b.n	b56ec <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
   b575c:	000b5385 	.word	0x000b5385
   b5760:	000b5769 	.word	0x000b5769
   b5764:	000b5a59 	.word	0x000b5a59

000b5768 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	switch (__op)
   b5768:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b576a:	b570      	push	{r4, r5, r6, lr}
   b576c:	4604      	mov	r4, r0
	switch (__op)
   b576e:	d103      	bne.n	b5778 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   b5770:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b5772:	6003      	str	r3, [r0, #0]
      }
   b5774:	2000      	movs	r0, #0
   b5776:	bd70      	pop	{r4, r5, r6, pc}
	  switch (__op)
   b5778:	2a02      	cmp	r2, #2
   b577a:	d00c      	beq.n	b5796 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
   b577c:	2a03      	cmp	r2, #3
   b577e:	d1f9      	bne.n	b5774 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   b5780:	6804      	ldr	r4, [r0, #0]
   b5782:	2c00      	cmp	r4, #0
   b5784:	d0f6      	beq.n	b5774 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
    class function<_Res(_ArgTypes...)>
   b5786:	4620      	mov	r0, r4
   b5788:	f7ff fc1e 	bl	b4fc8 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   b578c:	2114      	movs	r1, #20
   b578e:	4620      	mov	r0, r4
   b5790:	f7fe fc83 	bl	b409a <_ZdlPvj>
   b5794:	e7ee      	b.n	b5774 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   b5796:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
   b5798:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b579a:	f7fe fc7a 	bl	b4092 <_Znwj>
   b579e:	4605      	mov	r5, r0
   b57a0:	b120      	cbz	r0, b57ac <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x44>
      _Bind(const _Bind&) = default;
   b57a2:	4631      	mov	r1, r6
   b57a4:	f7ff ff4e 	bl	b5644 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   b57a8:	7c33      	ldrb	r3, [r6, #16]
   b57aa:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
   b57ac:	6025      	str	r5, [r4, #0]
	}
   b57ae:	e7e1      	b.n	b5774 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>

000b57b0 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b57b0:	4770      	bx	lr

000b57b2 <_ZN9IPAddressD0Ev>:
   b57b2:	b510      	push	{r4, lr}
   b57b4:	2118      	movs	r1, #24
   b57b6:	4604      	mov	r4, r0
   b57b8:	f7fe fc6f 	bl	b409a <_ZdlPvj>
   b57bc:	4620      	mov	r0, r4
   b57be:	bd10      	pop	{r4, pc}

000b57c0 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b57c0:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b57c2:	7d03      	ldrb	r3, [r0, #20]
   b57c4:	2b06      	cmp	r3, #6
{
   b57c6:	b08d      	sub	sp, #52	; 0x34
   b57c8:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b57ca:	f100 0704 	add.w	r7, r0, #4
   b57ce:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b57d2:	d012      	beq.n	b57fa <_ZNK9IPAddress7printToER5Print+0x3a>
   b57d4:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b57d8:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b57dc:	220a      	movs	r2, #10
   b57de:	4630      	mov	r0, r6
   b57e0:	f7ff fc77 	bl	b50d2 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b57e4:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b57e6:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b57e8:	d019      	beq.n	b581e <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b57ea:	2c00      	cmp	r4, #0
   b57ec:	d0f4      	beq.n	b57d8 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b57ee:	212e      	movs	r1, #46	; 0x2e
   b57f0:	4630      	mov	r0, r6
   b57f2:	f7ff fc55 	bl	b50a0 <_ZN5Print5printEc>
   b57f6:	4404      	add	r4, r0
   b57f8:	e7ee      	b.n	b57d8 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b57fa:	232f      	movs	r3, #47	; 0x2f
   b57fc:	466a      	mov	r2, sp
   b57fe:	4639      	mov	r1, r7
   b5800:	200a      	movs	r0, #10
		buf[0] = 0;
   b5802:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b5806:	f7ff f84b 	bl	b48a0 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b580a:	4668      	mov	r0, sp
   b580c:	f000 fba5 	bl	b5f5a <strlen>
   b5810:	6833      	ldr	r3, [r6, #0]
   b5812:	4602      	mov	r2, r0
   b5814:	68db      	ldr	r3, [r3, #12]
   b5816:	4669      	mov	r1, sp
   b5818:	4630      	mov	r0, r6
   b581a:	4798      	blx	r3
   b581c:	4604      	mov	r4, r0
    }
    return n;
}
   b581e:	4620      	mov	r0, r4
   b5820:	b00d      	add	sp, #52	; 0x34
   b5822:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b5824 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b5824:	b510      	push	{r4, lr}
   b5826:	4b05      	ldr	r3, [pc, #20]	; (b583c <_ZN9IPAddressC1Ev+0x18>)
   b5828:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b582a:	2211      	movs	r2, #17
   b582c:	f840 3b04 	str.w	r3, [r0], #4
   b5830:	2100      	movs	r1, #0
   b5832:	f000 fb3e 	bl	b5eb2 <memset>
}
   b5836:	4620      	mov	r0, r4
   b5838:	bd10      	pop	{r4, pc}
   b583a:	bf00      	nop
   b583c:	000b6244 	.word	0x000b6244

000b5840 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b5840:	4603      	mov	r3, r0
   b5842:	4a07      	ldr	r2, [pc, #28]	; (b5860 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b5844:	b510      	push	{r4, lr}
   b5846:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b584a:	f101 0210 	add.w	r2, r1, #16
   b584e:	f851 4b04 	ldr.w	r4, [r1], #4
   b5852:	f843 4b04 	str.w	r4, [r3], #4
   b5856:	4291      	cmp	r1, r2
   b5858:	d1f9      	bne.n	b584e <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b585a:	780a      	ldrb	r2, [r1, #0]
   b585c:	701a      	strb	r2, [r3, #0]
}
   b585e:	bd10      	pop	{r4, pc}
   b5860:	000b6244 	.word	0x000b6244

000b5864 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b5864:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b5866:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b586a:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b586e:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b5872:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b5876:	2304      	movs	r3, #4
   b5878:	6041      	str	r1, [r0, #4]
   b587a:	7503      	strb	r3, [r0, #20]
}
   b587c:	bd10      	pop	{r4, pc}
	...

000b5880 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b5880:	b507      	push	{r0, r1, r2, lr}
   b5882:	4b06      	ldr	r3, [pc, #24]	; (b589c <_ZN9IPAddressC1EPKh+0x1c>)
   b5884:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b5886:	78cb      	ldrb	r3, [r1, #3]
   b5888:	9300      	str	r3, [sp, #0]
   b588a:	788b      	ldrb	r3, [r1, #2]
   b588c:	784a      	ldrb	r2, [r1, #1]
   b588e:	7809      	ldrb	r1, [r1, #0]
   b5890:	f7ff ffe8 	bl	b5864 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b5894:	b003      	add	sp, #12
   b5896:	f85d fb04 	ldr.w	pc, [sp], #4
   b589a:	bf00      	nop
   b589c:	000b6244 	.word	0x000b6244

000b58a0 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b58a0:	7441      	strb	r1, [r0, #17]
}
   b58a2:	4770      	bx	lr

000b58a4 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b58a4:	4770      	bx	lr

000b58a6 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b58a6:	4770      	bx	lr

000b58a8 <_ZN9USBSerial4readEv>:
{
   b58a8:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b58aa:	2100      	movs	r1, #0
   b58ac:	7c00      	ldrb	r0, [r0, #16]
   b58ae:	f7ff f8e7 	bl	b4a80 <HAL_USB_USART_Receive_Data>
}
   b58b2:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b58b6:	bd08      	pop	{r3, pc}

000b58b8 <_ZN9USBSerial4peekEv>:
{
   b58b8:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b58ba:	2101      	movs	r1, #1
   b58bc:	7c00      	ldrb	r0, [r0, #16]
   b58be:	f7ff f8df 	bl	b4a80 <HAL_USB_USART_Receive_Data>
}
   b58c2:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b58c6:	bd08      	pop	{r3, pc}

000b58c8 <_ZN9USBSerial17availableForWriteEv>:
{
   b58c8:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b58ca:	7c00      	ldrb	r0, [r0, #16]
   b58cc:	f7ff f8d0 	bl	b4a70 <HAL_USB_USART_Available_Data_For_Write>
}
   b58d0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b58d4:	bd08      	pop	{r3, pc}

000b58d6 <_ZN9USBSerial9availableEv>:
{
   b58d6:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b58d8:	7c00      	ldrb	r0, [r0, #16]
   b58da:	f7ff f8c1 	bl	b4a60 <HAL_USB_USART_Available_Data>
}
   b58de:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b58e2:	bd08      	pop	{r3, pc}

000b58e4 <_ZN9USBSerial5writeEh>:
{
   b58e4:	b513      	push	{r0, r1, r4, lr}
   b58e6:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b58e8:	7c00      	ldrb	r0, [r0, #16]
{
   b58ea:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b58ec:	f7ff f8c0 	bl	b4a70 <HAL_USB_USART_Available_Data_For_Write>
   b58f0:	2800      	cmp	r0, #0
   b58f2:	9901      	ldr	r1, [sp, #4]
   b58f4:	dc01      	bgt.n	b58fa <_ZN9USBSerial5writeEh+0x16>
   b58f6:	7c60      	ldrb	r0, [r4, #17]
   b58f8:	b120      	cbz	r0, b5904 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b58fa:	7c20      	ldrb	r0, [r4, #16]
   b58fc:	f7ff f8c8 	bl	b4a90 <HAL_USB_USART_Send_Data>
   b5900:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b5904:	b002      	add	sp, #8
   b5906:	bd10      	pop	{r4, pc}

000b5908 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b5908:	7c00      	ldrb	r0, [r0, #16]
   b590a:	f7ff b8c9 	b.w	b4aa0 <HAL_USB_USART_Flush_Data>

000b590e <_ZN9USBSerialD0Ev>:
   b590e:	b510      	push	{r4, lr}
   b5910:	2114      	movs	r1, #20
   b5912:	4604      	mov	r4, r0
   b5914:	f7fe fbc1 	bl	b409a <_ZdlPvj>
   b5918:	4620      	mov	r0, r4
   b591a:	bd10      	pop	{r4, pc}

000b591c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b591c:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b591e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b5922:	4604      	mov	r4, r0
   b5924:	4608      	mov	r0, r1
   b5926:	2100      	movs	r1, #0
   b5928:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b592c:	4b04      	ldr	r3, [pc, #16]	; (b5940 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b592e:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b5930:	2301      	movs	r3, #1
  _serial = serial;
   b5932:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b5934:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b5936:	4611      	mov	r1, r2
   b5938:	f7ff f882 	bl	b4a40 <HAL_USB_USART_Init>
}
   b593c:	4620      	mov	r0, r4
   b593e:	bd10      	pop	{r4, pc}
   b5940:	000b6258 	.word	0x000b6258

000b5944 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   b5944:	7c00      	ldrb	r0, [r0, #16]
   b5946:	2200      	movs	r2, #0
   b5948:	f7ff b882 	b.w	b4a50 <HAL_USB_USART_Begin>

000b594c <_ZN9USBSerial9isEnabledEv>:
  return HAL_USB_USART_Is_Enabled(_serial);
   b594c:	7c00      	ldrb	r0, [r0, #16]
   b594e:	f7ff b8af 	b.w	b4ab0 <HAL_USB_USART_Is_Enabled>

000b5952 <_ZN9USBSerialcvbEv>:
  return isEnabled();
   b5952:	f7ff bffb 	b.w	b594c <_ZN9USBSerial9isEnabledEv>

000b5956 <_Z19acquireSerialBufferv>:
{
   b5956:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b5958:	2214      	movs	r2, #20
{
   b595a:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b595c:	2100      	movs	r1, #0
   b595e:	f000 faa8 	bl	b5eb2 <memset>
}
   b5962:	4620      	mov	r0, r4
   b5964:	bd10      	pop	{r4, pc}
	...

000b5968 <_Z16_fetch_usbserialv>:
{
   b5968:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b596a:	4c0f      	ldr	r4, [pc, #60]	; (b59a8 <_Z16_fetch_usbserialv+0x40>)
{
   b596c:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b596e:	a803      	add	r0, sp, #12
   b5970:	f7ff fff1 	bl	b5956 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b5974:	7821      	ldrb	r1, [r4, #0]
   b5976:	f3bf 8f5b 	dmb	ish
   b597a:	f011 0101 	ands.w	r1, r1, #1
   b597e:	d10f      	bne.n	b59a0 <_Z16_fetch_usbserialv+0x38>
   b5980:	4620      	mov	r0, r4
   b5982:	9101      	str	r1, [sp, #4]
   b5984:	f7fe fb8b 	bl	b409e <__cxa_guard_acquire>
   b5988:	9901      	ldr	r1, [sp, #4]
   b598a:	b148      	cbz	r0, b59a0 <_Z16_fetch_usbserialv+0x38>
   b598c:	aa03      	add	r2, sp, #12
   b598e:	4807      	ldr	r0, [pc, #28]	; (b59ac <_Z16_fetch_usbserialv+0x44>)
   b5990:	f7ff ffc4 	bl	b591c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b5994:	4620      	mov	r0, r4
   b5996:	f7fe fb87 	bl	b40a8 <__cxa_guard_release>
   b599a:	4805      	ldr	r0, [pc, #20]	; (b59b0 <_Z16_fetch_usbserialv+0x48>)
   b599c:	f000 fa75 	bl	b5e8a <atexit>
	return _usbserial;
}
   b59a0:	4802      	ldr	r0, [pc, #8]	; (b59ac <_Z16_fetch_usbserialv+0x44>)
   b59a2:	b008      	add	sp, #32
   b59a4:	bd10      	pop	{r4, pc}
   b59a6:	bf00      	nop
   b59a8:	2003e700 	.word	0x2003e700
   b59ac:	2003e704 	.word	0x2003e704
   b59b0:	000b58a5 	.word	0x000b58a5

000b59b4 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b59b4:	4770      	bx	lr

000b59b6 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b59b6:	7441      	strb	r1, [r0, #17]
}
   b59b8:	4770      	bx	lr

000b59ba <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b59ba:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b59bc:	7c00      	ldrb	r0, [r0, #16]
   b59be:	f7fe ffa7 	bl	b4910 <hal_usart_available_data_for_write>
}
   b59c2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b59c6:	bd08      	pop	{r3, pc}

000b59c8 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b59c8:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b59ca:	7c00      	ldrb	r0, [r0, #16]
   b59cc:	f7fe ff78 	bl	b48c0 <hal_usart_available>
}
   b59d0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b59d4:	bd08      	pop	{r3, pc}

000b59d6 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b59d6:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b59d8:	7c00      	ldrb	r0, [r0, #16]
   b59da:	f7fe ff81 	bl	b48e0 <hal_usart_peek>
}
   b59de:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b59e2:	bd08      	pop	{r3, pc}

000b59e4 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b59e4:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b59e6:	7c00      	ldrb	r0, [r0, #16]
   b59e8:	f7fe ff72 	bl	b48d0 <hal_usart_read>
}
   b59ec:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b59f0:	bd08      	pop	{r3, pc}

000b59f2 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b59f2:	7c00      	ldrb	r0, [r0, #16]
   b59f4:	f7fe bf7c 	b.w	b48f0 <hal_usart_flush>

000b59f8 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b59f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b59fa:	7c45      	ldrb	r5, [r0, #17]
{
   b59fc:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b59fe:	b12d      	cbz	r5, b5a0c <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b5a00:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b5a02:	b003      	add	sp, #12
   b5a04:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b5a08:	f7fe bf52 	b.w	b48b0 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b5a0c:	7c00      	ldrb	r0, [r0, #16]
   b5a0e:	9101      	str	r1, [sp, #4]
   b5a10:	f7fe ff7e 	bl	b4910 <hal_usart_available_data_for_write>
   b5a14:	2800      	cmp	r0, #0
   b5a16:	9901      	ldr	r1, [sp, #4]
   b5a18:	dcf2      	bgt.n	b5a00 <_ZN11USARTSerial5writeEh+0x8>
}
   b5a1a:	4628      	mov	r0, r5
   b5a1c:	b003      	add	sp, #12
   b5a1e:	bd30      	pop	{r4, r5, pc}

000b5a20 <_ZN11USARTSerialD0Ev>:
   b5a20:	b510      	push	{r4, lr}
   b5a22:	2114      	movs	r1, #20
   b5a24:	4604      	mov	r4, r0
   b5a26:	f7fe fb38 	bl	b409a <_ZdlPvj>
   b5a2a:	4620      	mov	r0, r4
   b5a2c:	bd10      	pop	{r4, pc}
	...

000b5a30 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b5a30:	b510      	push	{r4, lr}
   b5a32:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b5a36:	4604      	mov	r4, r0
   b5a38:	4608      	mov	r0, r1
   b5a3a:	4611      	mov	r1, r2
   b5a3c:	2200      	movs	r2, #0
   b5a3e:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b5a42:	4b04      	ldr	r3, [pc, #16]	; (b5a54 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b5a44:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b5a46:	2301      	movs	r3, #1
  _serial = serial;
   b5a48:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b5a4a:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b5a4c:	f7fe ff68 	bl	b4920 <hal_usart_init_ex>
}
   b5a50:	4620      	mov	r0, r4
   b5a52:	bd10      	pop	{r4, pc}
   b5a54:	000b6288 	.word	0x000b6288

000b5a58 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   b5a58:	b510      	push	{r4, lr}
      if (_M_empty())
   b5a5a:	6883      	ldr	r3, [r0, #8]
   b5a5c:	4604      	mov	r4, r0
   b5a5e:	b90b      	cbnz	r3, b5a64 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   b5a60:	f000 fa10 	bl	b5e84 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b5a64:	68c3      	ldr	r3, [r0, #12]
   b5a66:	4798      	blx	r3
      if (_M_manager)
   b5a68:	68a3      	ldr	r3, [r4, #8]
   b5a6a:	b11b      	cbz	r3, b5a74 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b5a6c:	2203      	movs	r2, #3
   b5a6e:	4621      	mov	r1, r4
   b5a70:	4620      	mov	r0, r4
   b5a72:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   b5a74:	4620      	mov	r0, r4
   b5a76:	2110      	movs	r1, #16
}
   b5a78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
   b5a7c:	f7fe bb0d 	b.w	b409a <_ZdlPvj>

000b5a80 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b5a80:	4770      	bx	lr

000b5a82 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b5a82:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5a84:	4606      	mov	r6, r0
   b5a86:	4615      	mov	r5, r2
   b5a88:	460c      	mov	r4, r1
   b5a8a:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b5a8c:	42bc      	cmp	r4, r7
   b5a8e:	d006      	beq.n	b5a9e <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b5a90:	6833      	ldr	r3, [r6, #0]
   b5a92:	f814 1b01 	ldrb.w	r1, [r4], #1
   b5a96:	689b      	ldr	r3, [r3, #8]
   b5a98:	4630      	mov	r0, r6
   b5a9a:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b5a9c:	e7f6      	b.n	b5a8c <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b5a9e:	4628      	mov	r0, r5
   b5aa0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b5aa2 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b5aa2:	7c00      	ldrb	r0, [r0, #16]
   b5aa4:	2200      	movs	r2, #0
   b5aa6:	f7fe bf43 	b.w	b4930 <hal_i2c_write>

000b5aaa <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b5aaa:	7c00      	ldrb	r0, [r0, #16]
   b5aac:	2100      	movs	r1, #0
   b5aae:	f7fe bf47 	b.w	b4940 <hal_i2c_available>

000b5ab2 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b5ab2:	7c00      	ldrb	r0, [r0, #16]
   b5ab4:	2100      	movs	r1, #0
   b5ab6:	f7fe bf4b 	b.w	b4950 <hal_i2c_read>

000b5aba <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b5aba:	7c00      	ldrb	r0, [r0, #16]
   b5abc:	2100      	movs	r1, #0
   b5abe:	f7fe bf4f 	b.w	b4960 <hal_i2c_peek>

000b5ac2 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b5ac2:	7c00      	ldrb	r0, [r0, #16]
   b5ac4:	2100      	movs	r1, #0
   b5ac6:	f7fe bf53 	b.w	b4970 <hal_i2c_flush>

000b5aca <_ZN7TwoWireD0Ev>:
   b5aca:	b510      	push	{r4, lr}
   b5acc:	2114      	movs	r1, #20
   b5ace:	4604      	mov	r4, r0
   b5ad0:	f7fe fae3 	bl	b409a <_ZdlPvj>
   b5ad4:	4620      	mov	r0, r4
   b5ad6:	bd10      	pop	{r4, pc}

000b5ad8 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b5ad8:	b510      	push	{r4, lr}
   b5ada:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b5ade:	4604      	mov	r4, r0
   b5ae0:	4608      	mov	r0, r1
   b5ae2:	2100      	movs	r1, #0
   b5ae4:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b5ae8:	4b03      	ldr	r3, [pc, #12]	; (b5af8 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   b5aea:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   b5aec:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   b5aee:	4611      	mov	r1, r2
   b5af0:	f7fe ff4e 	bl	b4990 <hal_i2c_init>
}
   b5af4:	4620      	mov	r0, r4
   b5af6:	bd10      	pop	{r4, pc}
   b5af8:	000b62b8 	.word	0x000b62b8

000b5afc <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   b5afc:	2200      	movs	r2, #0
   b5afe:	6840      	ldr	r0, [r0, #4]
   b5b00:	4611      	mov	r1, r2
   b5b02:	f7ff b829 	b.w	b4b58 <network_ready>

000b5b06 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b5b06:	2200      	movs	r2, #0
   b5b08:	6840      	ldr	r0, [r0, #4]
   b5b0a:	4611      	mov	r1, r2
   b5b0c:	f7ff b844 	b.w	b4b98 <network_listening>

000b5b10 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b5b10:	2200      	movs	r2, #0
   b5b12:	6840      	ldr	r0, [r0, #4]
   b5b14:	4611      	mov	r1, r2
   b5b16:	f7ff b84f 	b.w	b4bb8 <network_get_listen_timeout>

000b5b1a <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b5b1a:	6840      	ldr	r0, [r0, #4]
   b5b1c:	2200      	movs	r2, #0
   b5b1e:	f7ff b843 	b.w	b4ba8 <network_set_listen_timeout>

000b5b22 <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b5b22:	6840      	ldr	r0, [r0, #4]
   b5b24:	2200      	movs	r2, #0
   b5b26:	f081 0101 	eor.w	r1, r1, #1
   b5b2a:	f7ff b82d 	b.w	b4b88 <network_listen>

000b5b2e <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b5b2e:	2300      	movs	r3, #0
   b5b30:	6840      	ldr	r0, [r0, #4]
   b5b32:	461a      	mov	r2, r3
   b5b34:	4619      	mov	r1, r3
   b5b36:	f7ff b81f 	b.w	b4b78 <network_off>

000b5b3a <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b5b3a:	2300      	movs	r3, #0
   b5b3c:	6840      	ldr	r0, [r0, #4]
   b5b3e:	461a      	mov	r2, r3
   b5b40:	4619      	mov	r1, r3
   b5b42:	f7ff b811 	b.w	b4b68 <network_on>

000b5b46 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b5b46:	2200      	movs	r2, #0
   b5b48:	6840      	ldr	r0, [r0, #4]
   b5b4a:	4611      	mov	r1, r2
   b5b4c:	f7fe bff4 	b.w	b4b38 <network_connecting>

000b5b50 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b5b50:	6840      	ldr	r0, [r0, #4]
   b5b52:	2200      	movs	r2, #0
   b5b54:	2102      	movs	r1, #2
   b5b56:	f7fe bff7 	b.w	b4b48 <network_disconnect>

000b5b5a <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b5b5a:	2300      	movs	r3, #0
   b5b5c:	6840      	ldr	r0, [r0, #4]
   b5b5e:	461a      	mov	r2, r3
   b5b60:	f7fe bfe2 	b.w	b4b28 <network_connect>

000b5b64 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   b5b64:	4b02      	ldr	r3, [pc, #8]	; (b5b70 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   b5b66:	2204      	movs	r2, #4
   b5b68:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   b5b6a:	4a02      	ldr	r2, [pc, #8]	; (b5b74 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   b5b6c:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   b5b6e:	4770      	bx	lr
   b5b70:	2003e718 	.word	0x2003e718
   b5b74:	000b62e0 	.word	0x000b62e0

000b5b78 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b5b78:	2300      	movs	r3, #0
   b5b7a:	6840      	ldr	r0, [r0, #4]
   b5b7c:	461a      	mov	r2, r3
   b5b7e:	f7fe bfd3 	b.w	b4b28 <network_connect>

000b5b82 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b5b82:	6840      	ldr	r0, [r0, #4]
   b5b84:	2200      	movs	r2, #0
   b5b86:	2102      	movs	r1, #2
   b5b88:	f7fe bfde 	b.w	b4b48 <network_disconnect>

000b5b8c <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b5b8c:	2200      	movs	r2, #0
   b5b8e:	6840      	ldr	r0, [r0, #4]
   b5b90:	4611      	mov	r1, r2
   b5b92:	f7fe bfd1 	b.w	b4b38 <network_connecting>

000b5b96 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b5b96:	2200      	movs	r2, #0
   b5b98:	6840      	ldr	r0, [r0, #4]
   b5b9a:	4611      	mov	r1, r2
   b5b9c:	f7fe bfdc 	b.w	b4b58 <network_ready>

000b5ba0 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b5ba0:	2300      	movs	r3, #0
   b5ba2:	6840      	ldr	r0, [r0, #4]
   b5ba4:	461a      	mov	r2, r3
   b5ba6:	4619      	mov	r1, r3
   b5ba8:	f7fe bfde 	b.w	b4b68 <network_on>

000b5bac <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b5bac:	2300      	movs	r3, #0
   b5bae:	6840      	ldr	r0, [r0, #4]
   b5bb0:	461a      	mov	r2, r3
   b5bb2:	4619      	mov	r1, r3
   b5bb4:	f7fe bfe0 	b.w	b4b78 <network_off>

000b5bb8 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b5bb8:	6840      	ldr	r0, [r0, #4]
   b5bba:	2100      	movs	r1, #0
   b5bbc:	f7ff b804 	b.w	b4bc8 <network_is_on>

000b5bc0 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b5bc0:	6840      	ldr	r0, [r0, #4]
   b5bc2:	2100      	movs	r1, #0
   b5bc4:	f7ff b808 	b.w	b4bd8 <network_is_off>

000b5bc8 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b5bc8:	6840      	ldr	r0, [r0, #4]
   b5bca:	2200      	movs	r2, #0
   b5bcc:	f081 0101 	eor.w	r1, r1, #1
   b5bd0:	f7fe bfda 	b.w	b4b88 <network_listen>

000b5bd4 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b5bd4:	6840      	ldr	r0, [r0, #4]
   b5bd6:	2200      	movs	r2, #0
   b5bd8:	f7fe bfe6 	b.w	b4ba8 <network_set_listen_timeout>

000b5bdc <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b5bdc:	2200      	movs	r2, #0
   b5bde:	6840      	ldr	r0, [r0, #4]
   b5be0:	4611      	mov	r1, r2
   b5be2:	f7fe bfe9 	b.w	b4bb8 <network_get_listen_timeout>

000b5be6 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b5be6:	2200      	movs	r2, #0
   b5be8:	6840      	ldr	r0, [r0, #4]
   b5bea:	4611      	mov	r1, r2
   b5bec:	f7fe bfd4 	b.w	b4b98 <network_listening>

000b5bf0 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b5bf0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b5bf4:	b095      	sub	sp, #84	; 0x54
   b5bf6:	4614      	mov	r4, r2
   b5bf8:	460d      	mov	r5, r1
   b5bfa:	4607      	mov	r7, r0
    IPAddress addr;
   b5bfc:	f7ff fe12 	bl	b5824 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b5c00:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b5c02:	221c      	movs	r2, #28
   b5c04:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b5c06:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b5c08:	f000 f953 	bl	b5eb2 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b5c0c:	2340      	movs	r3, #64	; 0x40
   b5c0e:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b5c10:	4620      	mov	r0, r4
   b5c12:	466b      	mov	r3, sp
   b5c14:	aa0c      	add	r2, sp, #48	; 0x30
   b5c16:	2100      	movs	r1, #0
   b5c18:	f7fe fe12 	bl	b4840 <netdb_getaddrinfo>
    if (!r) {
   b5c1c:	4604      	mov	r4, r0
   b5c1e:	2800      	cmp	r0, #0
   b5c20:	d14b      	bne.n	b5cba <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b5c22:	4602      	mov	r2, r0
   b5c24:	2101      	movs	r1, #1
   b5c26:	6868      	ldr	r0, [r5, #4]
   b5c28:	f7fe ff96 	bl	b4b58 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b5c2c:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b5c2e:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b5c30:	4622      	mov	r2, r4
   b5c32:	6868      	ldr	r0, [r5, #4]
   b5c34:	f7fe ff90 	bl	b4b58 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b5c38:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b5c3a:	4681      	mov	r9, r0
        bool ok = false;
   b5c3c:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b5c3e:	2e00      	cmp	r6, #0
   b5c40:	d03b      	beq.n	b5cba <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b5c42:	2900      	cmp	r1, #0
   b5c44:	d139      	bne.n	b5cba <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b5c46:	6873      	ldr	r3, [r6, #4]
   b5c48:	2b02      	cmp	r3, #2
   b5c4a:	d003      	beq.n	b5c54 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b5c4c:	2b0a      	cmp	r3, #10
   b5c4e:	d011      	beq.n	b5c74 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b5c50:	69f6      	ldr	r6, [r6, #28]
   b5c52:	e7f4      	b.n	b5c3e <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b5c54:	f1b8 0f00 	cmp.w	r8, #0
   b5c58:	d0fa      	beq.n	b5c50 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b5c5a:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b5c5c:	a806      	add	r0, sp, #24
   b5c5e:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b5c60:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b5c62:	f7ff fe0d 	bl	b5880 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b5c66:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b5c68:	1d3c      	adds	r4, r7, #4
   b5c6a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b5c6c:	682b      	ldr	r3, [r5, #0]
   b5c6e:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b5c70:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b5c72:	e7ed      	b.n	b5c50 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b5c74:	f1b9 0f00 	cmp.w	r9, #0
   b5c78:	d0ea      	beq.n	b5c50 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b5c7a:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b5c7c:	2210      	movs	r2, #16
   b5c7e:	a801      	add	r0, sp, #4
   b5c80:	f000 f917 	bl	b5eb2 <memset>
                    a.v = 6;
   b5c84:	2306      	movs	r3, #6
   b5c86:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b5c8a:	ad01      	add	r5, sp, #4
   b5c8c:	f104 0308 	add.w	r3, r4, #8
   b5c90:	3418      	adds	r4, #24
   b5c92:	6818      	ldr	r0, [r3, #0]
   b5c94:	6859      	ldr	r1, [r3, #4]
   b5c96:	462a      	mov	r2, r5
   b5c98:	c203      	stmia	r2!, {r0, r1}
   b5c9a:	3308      	adds	r3, #8
   b5c9c:	42a3      	cmp	r3, r4
   b5c9e:	4615      	mov	r5, r2
   b5ca0:	d1f7      	bne.n	b5c92 <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b5ca2:	a901      	add	r1, sp, #4
   b5ca4:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b5ca6:	ad07      	add	r5, sp, #28
   b5ca8:	f7ff fdca 	bl	b5840 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b5cac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b5cae:	1d3c      	adds	r4, r7, #4
   b5cb0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b5cb2:	682b      	ldr	r3, [r5, #0]
   b5cb4:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b5cb6:	4649      	mov	r1, r9
   b5cb8:	e7ca      	b.n	b5c50 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b5cba:	9800      	ldr	r0, [sp, #0]
   b5cbc:	f7fe fdb8 	bl	b4830 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b5cc0:	4638      	mov	r0, r7
   b5cc2:	b015      	add	sp, #84	; 0x54
   b5cc4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b5cc8 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b5cc8:	4b02      	ldr	r3, [pc, #8]	; (b5cd4 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b5cca:	4a03      	ldr	r2, [pc, #12]	; (b5cd8 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b5ccc:	601a      	str	r2, [r3, #0]
   b5cce:	2200      	movs	r2, #0
   b5cd0:	605a      	str	r2, [r3, #4]

} // spark
   b5cd2:	4770      	bx	lr
   b5cd4:	2003e720 	.word	0x2003e720
   b5cd8:	000b631c 	.word	0x000b631c

000b5cdc <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   b5cdc:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   b5cde:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   b5ce0:	d902      	bls.n	b5ce8 <pinAvailable+0xc>
    return false;
   b5ce2:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   b5ce4:	b002      	add	sp, #8
   b5ce6:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   b5ce8:	f1a0 030b 	sub.w	r3, r0, #11
   b5cec:	2b02      	cmp	r3, #2
   b5cee:	d81a      	bhi.n	b5d26 <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b5cf0:	4c17      	ldr	r4, [pc, #92]	; (b5d50 <pinAvailable+0x74>)
   b5cf2:	7821      	ldrb	r1, [r4, #0]
   b5cf4:	f3bf 8f5b 	dmb	ish
   b5cf8:	f011 0101 	ands.w	r1, r1, #1
   b5cfc:	d10b      	bne.n	b5d16 <pinAvailable+0x3a>
   b5cfe:	4620      	mov	r0, r4
   b5d00:	9101      	str	r1, [sp, #4]
   b5d02:	f7fe f9cc 	bl	b409e <__cxa_guard_acquire>
   b5d06:	9901      	ldr	r1, [sp, #4]
   b5d08:	b128      	cbz	r0, b5d16 <pinAvailable+0x3a>
   b5d0a:	4812      	ldr	r0, [pc, #72]	; (b5d54 <pinAvailable+0x78>)
   b5d0c:	f7ff f808 	bl	b4d20 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b5d10:	4620      	mov	r0, r4
   b5d12:	f7fe f9c9 	bl	b40a8 <__cxa_guard_release>
   b5d16:	4b0f      	ldr	r3, [pc, #60]	; (b5d54 <pinAvailable+0x78>)
   b5d18:	7818      	ldrb	r0, [r3, #0]
   b5d1a:	f7fe fe71 	bl	b4a00 <hal_spi_is_enabled>
   b5d1e:	2800      	cmp	r0, #0
   b5d20:	d1df      	bne.n	b5ce2 <pinAvailable+0x6>
  return true; // 'pin' is available
   b5d22:	2001      	movs	r0, #1
   b5d24:	e7de      	b.n	b5ce4 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   b5d26:	2801      	cmp	r0, #1
   b5d28:	d809      	bhi.n	b5d3e <pinAvailable+0x62>
   b5d2a:	f000 f885 	bl	b5e38 <_Z19__fetch_global_Wirev>
   b5d2e:	2100      	movs	r1, #0
   b5d30:	7c00      	ldrb	r0, [r0, #16]
   b5d32:	f7fe fe25 	bl	b4980 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   b5d36:	f080 0001 	eor.w	r0, r0, #1
   b5d3a:	b2c0      	uxtb	r0, r0
   b5d3c:	e7d2      	b.n	b5ce4 <pinAvailable+0x8>
   b5d3e:	3809      	subs	r0, #9
   b5d40:	2801      	cmp	r0, #1
   b5d42:	d8ee      	bhi.n	b5d22 <pinAvailable+0x46>
   b5d44:	f000 f83c 	bl	b5dc0 <_Z22__fetch_global_Serial1v>
   b5d48:	7c00      	ldrb	r0, [r0, #16]
   b5d4a:	f7fe fdd9 	bl	b4900 <hal_usart_is_enabled>
   b5d4e:	e7f2      	b.n	b5d36 <pinAvailable+0x5a>
   b5d50:	2003e678 	.word	0x2003e678
   b5d54:	2003e67c 	.word	0x2003e67c

000b5d58 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   b5d58:	b538      	push	{r3, r4, r5, lr}
   b5d5a:	4604      	mov	r4, r0
   b5d5c:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   b5d5e:	f7fe fd77 	bl	b4850 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   b5d62:	28ff      	cmp	r0, #255	; 0xff
   b5d64:	d010      	beq.n	b5d88 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   b5d66:	2806      	cmp	r0, #6
   b5d68:	d804      	bhi.n	b5d74 <digitalWrite+0x1c>
   b5d6a:	234d      	movs	r3, #77	; 0x4d
   b5d6c:	fa23 f000 	lsr.w	r0, r3, r0
   b5d70:	07c3      	lsls	r3, r0, #31
   b5d72:	d409      	bmi.n	b5d88 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   b5d74:	4620      	mov	r0, r4
   b5d76:	f7ff ffb1 	bl	b5cdc <pinAvailable>
   b5d7a:	b128      	cbz	r0, b5d88 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   b5d7c:	4629      	mov	r1, r5
   b5d7e:	4620      	mov	r0, r4
}
   b5d80:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   b5d84:	f7fe bd6c 	b.w	b4860 <HAL_GPIO_Write>
}
   b5d88:	bd38      	pop	{r3, r4, r5, pc}

000b5d8a <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b5d8a:	4770      	bx	lr

000b5d8c <_Z20acquireSerial1Bufferv>:
{
   b5d8c:	b538      	push	{r3, r4, r5, lr}
   b5d8e:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b5d90:	2514      	movs	r5, #20
   b5d92:	462a      	mov	r2, r5
   b5d94:	2100      	movs	r1, #0
   b5d96:	f000 f88c 	bl	b5eb2 <memset>
   b5d9a:	8025      	strh	r5, [r4, #0]
   b5d9c:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b5d9e:	4907      	ldr	r1, [pc, #28]	; (b5dbc <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b5da0:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b5da2:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b5da4:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b5da6:	f000 f86b 	bl	b5e80 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b5daa:	4904      	ldr	r1, [pc, #16]	; (b5dbc <_Z20acquireSerial1Bufferv+0x30>)
    };
   b5dac:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b5dae:	4628      	mov	r0, r5
   b5db0:	f000 f866 	bl	b5e80 <_ZnajRKSt9nothrow_t>
    };
   b5db4:	60e0      	str	r0, [r4, #12]
}
   b5db6:	4620      	mov	r0, r4
   b5db8:	bd38      	pop	{r3, r4, r5, pc}
   b5dba:	bf00      	nop
   b5dbc:	000b6350 	.word	0x000b6350

000b5dc0 <_Z22__fetch_global_Serial1v>:
{
   b5dc0:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b5dc2:	4d0e      	ldr	r5, [pc, #56]	; (b5dfc <_Z22__fetch_global_Serial1v+0x3c>)
   b5dc4:	7829      	ldrb	r1, [r5, #0]
   b5dc6:	f3bf 8f5b 	dmb	ish
   b5dca:	f011 0401 	ands.w	r4, r1, #1
{
   b5dce:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b5dd0:	d111      	bne.n	b5df6 <_Z22__fetch_global_Serial1v+0x36>
   b5dd2:	4628      	mov	r0, r5
   b5dd4:	f7fe f963 	bl	b409e <__cxa_guard_acquire>
   b5dd8:	b168      	cbz	r0, b5df6 <_Z22__fetch_global_Serial1v+0x36>
   b5dda:	a801      	add	r0, sp, #4
   b5ddc:	f7ff ffd6 	bl	b5d8c <_Z20acquireSerial1Bufferv>
   b5de0:	aa01      	add	r2, sp, #4
   b5de2:	4621      	mov	r1, r4
   b5de4:	4806      	ldr	r0, [pc, #24]	; (b5e00 <_Z22__fetch_global_Serial1v+0x40>)
   b5de6:	f7ff fe23 	bl	b5a30 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b5dea:	4628      	mov	r0, r5
   b5dec:	f7fe f95c 	bl	b40a8 <__cxa_guard_release>
   b5df0:	4804      	ldr	r0, [pc, #16]	; (b5e04 <_Z22__fetch_global_Serial1v+0x44>)
   b5df2:	f000 f84a 	bl	b5e8a <atexit>
    return serial1;
}
   b5df6:	4802      	ldr	r0, [pc, #8]	; (b5e00 <_Z22__fetch_global_Serial1v+0x40>)
   b5df8:	b007      	add	sp, #28
   b5dfa:	bd30      	pop	{r4, r5, pc}
   b5dfc:	2003e728 	.word	0x2003e728
   b5e00:	2003e72c 	.word	0x2003e72c
   b5e04:	000b5d8b 	.word	0x000b5d8b

000b5e08 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b5e08:	4770      	bx	lr
	...

000b5e0c <_Z17acquireWireBufferv>:
{
   b5e0c:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   b5e0e:	2520      	movs	r5, #32
   b5e10:	2314      	movs	r3, #20
{
   b5e12:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   b5e14:	6003      	str	r3, [r0, #0]
   b5e16:	6085      	str	r5, [r0, #8]
   b5e18:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b5e1a:	4906      	ldr	r1, [pc, #24]	; (b5e34 <_Z17acquireWireBufferv+0x28>)
   b5e1c:	4628      	mov	r0, r5
   b5e1e:	f000 f82f 	bl	b5e80 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b5e22:	4904      	ldr	r1, [pc, #16]	; (b5e34 <_Z17acquireWireBufferv+0x28>)
	};
   b5e24:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b5e26:	4628      	mov	r0, r5
   b5e28:	f000 f82a 	bl	b5e80 <_ZnajRKSt9nothrow_t>
	};
   b5e2c:	60e0      	str	r0, [r4, #12]
}
   b5e2e:	4620      	mov	r0, r4
   b5e30:	bd38      	pop	{r3, r4, r5, pc}
   b5e32:	bf00      	nop
   b5e34:	000b6350 	.word	0x000b6350

000b5e38 <_Z19__fetch_global_Wirev>:
{
   b5e38:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b5e3a:	4d0e      	ldr	r5, [pc, #56]	; (b5e74 <_Z19__fetch_global_Wirev+0x3c>)
   b5e3c:	7829      	ldrb	r1, [r5, #0]
   b5e3e:	f3bf 8f5b 	dmb	ish
   b5e42:	f011 0401 	ands.w	r4, r1, #1
{
   b5e46:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b5e48:	d111      	bne.n	b5e6e <_Z19__fetch_global_Wirev+0x36>
   b5e4a:	4628      	mov	r0, r5
   b5e4c:	f7fe f927 	bl	b409e <__cxa_guard_acquire>
   b5e50:	b168      	cbz	r0, b5e6e <_Z19__fetch_global_Wirev+0x36>
   b5e52:	a801      	add	r0, sp, #4
   b5e54:	f7ff ffda 	bl	b5e0c <_Z17acquireWireBufferv>
   b5e58:	aa01      	add	r2, sp, #4
   b5e5a:	4621      	mov	r1, r4
   b5e5c:	4806      	ldr	r0, [pc, #24]	; (b5e78 <_Z19__fetch_global_Wirev+0x40>)
   b5e5e:	f7ff fe3b 	bl	b5ad8 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b5e62:	4628      	mov	r0, r5
   b5e64:	f7fe f920 	bl	b40a8 <__cxa_guard_release>
   b5e68:	4804      	ldr	r0, [pc, #16]	; (b5e7c <_Z19__fetch_global_Wirev+0x44>)
   b5e6a:	f000 f80e 	bl	b5e8a <atexit>
	return wire;
}
   b5e6e:	4802      	ldr	r0, [pc, #8]	; (b5e78 <_Z19__fetch_global_Wirev+0x40>)
   b5e70:	b007      	add	sp, #28
   b5e72:	bd30      	pop	{r4, r5, pc}
   b5e74:	2003e744 	.word	0x2003e744
   b5e78:	2003e748 	.word	0x2003e748
   b5e7c:	000b5e09 	.word	0x000b5e09

000b5e80 <_ZnajRKSt9nothrow_t>:
   b5e80:	f7fe b909 	b.w	b4096 <_Znaj>

000b5e84 <_ZSt25__throw_bad_function_callv>:
   b5e84:	b508      	push	{r3, lr}
   b5e86:	f7fe fee7 	bl	b4c58 <abort>

000b5e8a <atexit>:
   b5e8a:	2300      	movs	r3, #0
   b5e8c:	4601      	mov	r1, r0
   b5e8e:	461a      	mov	r2, r3
   b5e90:	4618      	mov	r0, r3
   b5e92:	f000 b87f 	b.w	b5f94 <__register_exitproc>

000b5e96 <memcpy>:
   b5e96:	440a      	add	r2, r1
   b5e98:	4291      	cmp	r1, r2
   b5e9a:	f100 33ff 	add.w	r3, r0, #4294967295
   b5e9e:	d100      	bne.n	b5ea2 <memcpy+0xc>
   b5ea0:	4770      	bx	lr
   b5ea2:	b510      	push	{r4, lr}
   b5ea4:	f811 4b01 	ldrb.w	r4, [r1], #1
   b5ea8:	f803 4f01 	strb.w	r4, [r3, #1]!
   b5eac:	4291      	cmp	r1, r2
   b5eae:	d1f9      	bne.n	b5ea4 <memcpy+0xe>
   b5eb0:	bd10      	pop	{r4, pc}

000b5eb2 <memset>:
   b5eb2:	4402      	add	r2, r0
   b5eb4:	4603      	mov	r3, r0
   b5eb6:	4293      	cmp	r3, r2
   b5eb8:	d100      	bne.n	b5ebc <memset+0xa>
   b5eba:	4770      	bx	lr
   b5ebc:	f803 1b01 	strb.w	r1, [r3], #1
   b5ec0:	e7f9      	b.n	b5eb6 <memset+0x4>
	...

000b5ec4 <srand>:
   b5ec4:	b538      	push	{r3, r4, r5, lr}
   b5ec6:	4b10      	ldr	r3, [pc, #64]	; (b5f08 <srand+0x44>)
   b5ec8:	681d      	ldr	r5, [r3, #0]
   b5eca:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b5ecc:	4604      	mov	r4, r0
   b5ece:	b9b3      	cbnz	r3, b5efe <srand+0x3a>
   b5ed0:	2018      	movs	r0, #24
   b5ed2:	f7fe fea1 	bl	b4c18 <malloc>
   b5ed6:	4602      	mov	r2, r0
   b5ed8:	63a8      	str	r0, [r5, #56]	; 0x38
   b5eda:	b920      	cbnz	r0, b5ee6 <srand+0x22>
   b5edc:	4b0b      	ldr	r3, [pc, #44]	; (b5f0c <srand+0x48>)
   b5ede:	480c      	ldr	r0, [pc, #48]	; (b5f10 <srand+0x4c>)
   b5ee0:	2142      	movs	r1, #66	; 0x42
   b5ee2:	f7fe fec9 	bl	b4c78 <__assert_func>
   b5ee6:	490b      	ldr	r1, [pc, #44]	; (b5f14 <srand+0x50>)
   b5ee8:	4b0b      	ldr	r3, [pc, #44]	; (b5f18 <srand+0x54>)
   b5eea:	e9c0 1300 	strd	r1, r3, [r0]
   b5eee:	4b0b      	ldr	r3, [pc, #44]	; (b5f1c <srand+0x58>)
   b5ef0:	6083      	str	r3, [r0, #8]
   b5ef2:	230b      	movs	r3, #11
   b5ef4:	8183      	strh	r3, [r0, #12]
   b5ef6:	2100      	movs	r1, #0
   b5ef8:	2001      	movs	r0, #1
   b5efa:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b5efe:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b5f00:	2200      	movs	r2, #0
   b5f02:	611c      	str	r4, [r3, #16]
   b5f04:	615a      	str	r2, [r3, #20]
   b5f06:	bd38      	pop	{r3, r4, r5, pc}
   b5f08:	2003e5f8 	.word	0x2003e5f8
   b5f0c:	000b6351 	.word	0x000b6351
   b5f10:	000b6368 	.word	0x000b6368
   b5f14:	abcd330e 	.word	0xabcd330e
   b5f18:	e66d1234 	.word	0xe66d1234
   b5f1c:	0005deec 	.word	0x0005deec

000b5f20 <strdup>:
   b5f20:	4b02      	ldr	r3, [pc, #8]	; (b5f2c <strdup+0xc>)
   b5f22:	4601      	mov	r1, r0
   b5f24:	6818      	ldr	r0, [r3, #0]
   b5f26:	f000 b803 	b.w	b5f30 <_strdup_r>
   b5f2a:	bf00      	nop
   b5f2c:	2003e5f8 	.word	0x2003e5f8

000b5f30 <_strdup_r>:
   b5f30:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b5f32:	4604      	mov	r4, r0
   b5f34:	4608      	mov	r0, r1
   b5f36:	460d      	mov	r5, r1
   b5f38:	f000 f80f 	bl	b5f5a <strlen>
   b5f3c:	1c42      	adds	r2, r0, #1
   b5f3e:	4611      	mov	r1, r2
   b5f40:	4620      	mov	r0, r4
   b5f42:	9201      	str	r2, [sp, #4]
   b5f44:	f7fe fe90 	bl	b4c68 <_malloc_r>
   b5f48:	4604      	mov	r4, r0
   b5f4a:	b118      	cbz	r0, b5f54 <_strdup_r+0x24>
   b5f4c:	9a01      	ldr	r2, [sp, #4]
   b5f4e:	4629      	mov	r1, r5
   b5f50:	f7ff ffa1 	bl	b5e96 <memcpy>
   b5f54:	4620      	mov	r0, r4
   b5f56:	b003      	add	sp, #12
   b5f58:	bd30      	pop	{r4, r5, pc}

000b5f5a <strlen>:
   b5f5a:	4603      	mov	r3, r0
   b5f5c:	f813 2b01 	ldrb.w	r2, [r3], #1
   b5f60:	2a00      	cmp	r2, #0
   b5f62:	d1fb      	bne.n	b5f5c <strlen+0x2>
   b5f64:	1a18      	subs	r0, r3, r0
   b5f66:	3801      	subs	r0, #1
   b5f68:	4770      	bx	lr

000b5f6a <strncmp>:
   b5f6a:	b510      	push	{r4, lr}
   b5f6c:	b17a      	cbz	r2, b5f8e <strncmp+0x24>
   b5f6e:	4603      	mov	r3, r0
   b5f70:	3901      	subs	r1, #1
   b5f72:	1884      	adds	r4, r0, r2
   b5f74:	f813 0b01 	ldrb.w	r0, [r3], #1
   b5f78:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   b5f7c:	4290      	cmp	r0, r2
   b5f7e:	d101      	bne.n	b5f84 <strncmp+0x1a>
   b5f80:	42a3      	cmp	r3, r4
   b5f82:	d101      	bne.n	b5f88 <strncmp+0x1e>
   b5f84:	1a80      	subs	r0, r0, r2
   b5f86:	bd10      	pop	{r4, pc}
   b5f88:	2800      	cmp	r0, #0
   b5f8a:	d1f3      	bne.n	b5f74 <strncmp+0xa>
   b5f8c:	e7fa      	b.n	b5f84 <strncmp+0x1a>
   b5f8e:	4610      	mov	r0, r2
   b5f90:	e7f9      	b.n	b5f86 <strncmp+0x1c>
	...

000b5f94 <__register_exitproc>:
   b5f94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b5f98:	f8df 80b8 	ldr.w	r8, [pc, #184]	; b6054 <__register_exitproc+0xc0>
   b5f9c:	4606      	mov	r6, r0
   b5f9e:	f8d8 0000 	ldr.w	r0, [r8]
   b5fa2:	461f      	mov	r7, r3
   b5fa4:	460d      	mov	r5, r1
   b5fa6:	4691      	mov	r9, r2
   b5fa8:	f000 f856 	bl	b6058 <__retarget_lock_acquire_recursive>
   b5fac:	4b25      	ldr	r3, [pc, #148]	; (b6044 <__register_exitproc+0xb0>)
   b5fae:	681c      	ldr	r4, [r3, #0]
   b5fb0:	b934      	cbnz	r4, b5fc0 <__register_exitproc+0x2c>
   b5fb2:	4c25      	ldr	r4, [pc, #148]	; (b6048 <__register_exitproc+0xb4>)
   b5fb4:	601c      	str	r4, [r3, #0]
   b5fb6:	4b25      	ldr	r3, [pc, #148]	; (b604c <__register_exitproc+0xb8>)
   b5fb8:	b113      	cbz	r3, b5fc0 <__register_exitproc+0x2c>
   b5fba:	681b      	ldr	r3, [r3, #0]
   b5fbc:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   b5fc0:	6863      	ldr	r3, [r4, #4]
   b5fc2:	2b1f      	cmp	r3, #31
   b5fc4:	dd07      	ble.n	b5fd6 <__register_exitproc+0x42>
   b5fc6:	f8d8 0000 	ldr.w	r0, [r8]
   b5fca:	f000 f847 	bl	b605c <__retarget_lock_release_recursive>
   b5fce:	f04f 30ff 	mov.w	r0, #4294967295
   b5fd2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b5fd6:	b34e      	cbz	r6, b602c <__register_exitproc+0x98>
   b5fd8:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   b5fdc:	b988      	cbnz	r0, b6002 <__register_exitproc+0x6e>
   b5fde:	4b1c      	ldr	r3, [pc, #112]	; (b6050 <__register_exitproc+0xbc>)
   b5fe0:	b923      	cbnz	r3, b5fec <__register_exitproc+0x58>
   b5fe2:	f8d8 0000 	ldr.w	r0, [r8]
   b5fe6:	f000 f838 	bl	b605a <__retarget_lock_release>
   b5fea:	e7f0      	b.n	b5fce <__register_exitproc+0x3a>
   b5fec:	f44f 7084 	mov.w	r0, #264	; 0x108
   b5ff0:	f7fe fe12 	bl	b4c18 <malloc>
   b5ff4:	2800      	cmp	r0, #0
   b5ff6:	d0f4      	beq.n	b5fe2 <__register_exitproc+0x4e>
   b5ff8:	2300      	movs	r3, #0
   b5ffa:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   b5ffe:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   b6002:	6863      	ldr	r3, [r4, #4]
   b6004:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   b6008:	2201      	movs	r2, #1
   b600a:	409a      	lsls	r2, r3
   b600c:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   b6010:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   b6014:	4313      	orrs	r3, r2
   b6016:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   b601a:	2e02      	cmp	r6, #2
   b601c:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   b6020:	bf02      	ittt	eq
   b6022:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   b6026:	4313      	orreq	r3, r2
   b6028:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   b602c:	6863      	ldr	r3, [r4, #4]
   b602e:	f8d8 0000 	ldr.w	r0, [r8]
   b6032:	1c5a      	adds	r2, r3, #1
   b6034:	3302      	adds	r3, #2
   b6036:	6062      	str	r2, [r4, #4]
   b6038:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   b603c:	f000 f80e 	bl	b605c <__retarget_lock_release_recursive>
   b6040:	2000      	movs	r0, #0
   b6042:	e7c6      	b.n	b5fd2 <__register_exitproc+0x3e>
   b6044:	2003e7e8 	.word	0x2003e7e8
   b6048:	2003e75c 	.word	0x2003e75c
   b604c:	00000000 	.word	0x00000000
   b6050:	000b4c19 	.word	0x000b4c19
   b6054:	2003e65c 	.word	0x2003e65c

000b6058 <__retarget_lock_acquire_recursive>:
   b6058:	4770      	bx	lr

000b605a <__retarget_lock_release>:
   b605a:	4770      	bx	lr

000b605c <__retarget_lock_release_recursive>:
   b605c:	4770      	bx	lr

000b605e <link_code_end>:
	...

000b6060 <dynalib_user>:
   b6060:	401d 000b 4059 000b 4081 000b 4085 000b     .@..Y@...@...@..
   b6070:	0000 0000 6f6e 6220 616f 6472 4400 4245     ....no board.DEB
   b6080:	4755 4600 756f 646e 6320 6968 2070 4e50     UG.Found chip PN
   b6090:	0035 6946 6d72 6177 6572 7620 7265 202e     5.Firmware ver. 
   b60a0:	5700 6961 6974 676e 6620 726f 6120 206e     .Waiting for an 
   b60b0:	5349 314f 3434 3334 2041 6143 6472 2e20     ISO14443A Card .
   b60c0:	2e2e 6200 c36c 20a5 7262 6b69 6800 6976     ...bl.. brik.hvi
   b60d0:	7464 6b20 726f 0074 6f46 6e75 2064 6e61     dt kort.Found an
   b60e0:	4920 4f53 3431 3434 4133 6320 7261 0064      ISO14443A card.
   b60f0:	2020 4955 2044 654c 676e 6874 203a 2000       UID Length: . 
   b6100:	7962 6574 0073 2020 4955 2044 6156 756c     bytes.  UID Valu
   b6110:	3a65 0020 694d 6166 6572 4320 616c 7373     e: .Mifare Class
   b6120:	6369 6320 7261 2064 0023 0000 0000 0000     ic card #.......
   b6130:	3000 5200 6165 6964 676e 203a 2000 7830     .0.Reading: . 0x
   b6140:	0a00 6553 646e 6e69 3a67 0020 6f4e 4120     ..Sending: .No A
   b6150:	4b43 6420 7275 6e69 2067 6567 4674 7269     CK during getFir
   b6160:	776d 7261 5665 7265 6973 6e6f 0021 6946     mwareVersion!.Fi
   b6170:	6d72 6177 6572 6420 656f 6e73 7427 6d20     rmware doesn't m
   b6180:	7461 6863 0021 6f4e 6320 7261 2864 2973     atch!.No card(s)
   b6190:	7220 6165 0064 535b 4950 5020 4e49 5d53      read.[SPI PINS]
   b61a0:	4320 4b4c 413a 2c33 494d 4f53 413a 2c34      CLK:A3,MISO:A4,
   b61b0:	4f4d 4953 413a 2c35 5353 003a               MOSI:A5,SS:.

000b61bc <_ZTVN5spark13EthernetClassE>:
	...
   b61c4:	4cf7 000b 4ced 000b 4ce3 000b 4cd9 000b     .L...L...L...L..
   b61d4:	4ccd 000b 4cc1 000b 5bb9 000b 5bc1 000b     .L...L...[...[..
   b61e4:	4cb5 000b 4cad 000b 4ca3 000b 4c99 000b     .L...L...L...L..
   b61f4:	5bf1 000b                                   .[..

000b61f8 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   b61f8:	0800 1810 2820 3830 7061 0070 5925 252d     .... (08app.%Y-%
   b6208:	2d6d 6425 2554 3a48 4d25 253a 2553 007a     m-%dT%H:%M:%S%z.
   b6218:	7361 7463 6d69 0065                         asctime.

000b6220 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   b6228:	5281 000b 5287 000b 52c5 000b 5295 000b     .R...R...R...R..
   b6238:	5283 000b                                   .R..

000b623c <_ZTV9IPAddress>:
	...
   b6244:	57c1 000b 57b1 000b 57b3 000b               .W...W...W..

000b6250 <_ZTV9USBSerial>:
	...
   b6258:	58a7 000b 590f 000b 58e5 000b 5049 000b     .X...Y...X..IP..
   b6268:	58d7 000b 58a9 000b 58b9 000b 5909 000b     .X...X...X...Y..
   b6278:	58c9 000b 58a1 000b                         .X...X..

000b6280 <_ZTV11USARTSerial>:
	...
   b6288:	59b5 000b 5a21 000b 59f9 000b 5049 000b     .Y..!Z...Y..IP..
   b6298:	59c9 000b 59e5 000b 59d7 000b 59f3 000b     .Y...Y...Y...Y..
   b62a8:	59b7 000b 59bb 000b                         .Y...Y..

000b62b0 <_ZTV7TwoWire>:
	...
   b62b8:	5a81 000b 5acb 000b 5aa3 000b 5a83 000b     .Z...Z...Z...Z..
   b62c8:	5aab 000b 5ab3 000b 5abb 000b 5ac3 000b     .Z...Z...Z...Z..

000b62d8 <_ZTVN5spark9WiFiClassE>:
	...
   b62e0:	5b5b 000b 5b51 000b 5b47 000b 5afd 000b     [[..Q[..G[...Z..
   b62f0:	5b3b 000b 5b2f 000b 5bb9 000b 5bc1 000b     ;[../[...[...[..
   b6300:	5b23 000b 5b1b 000b 5b11 000b 5b07 000b     #[...[...[...[..
   b6310:	5bf1 000b                                   .[..

000b6314 <_ZTVN5spark12NetworkClassE>:
	...
   b631c:	5b79 000b 5b83 000b 5b8d 000b 5b97 000b     y[...[...[...[..
   b632c:	5ba1 000b 5bad 000b 5bb9 000b 5bc1 000b     .[...[...[...[..
   b633c:	5bc9 000b 5bd5 000b 5bdd 000b 5be7 000b     .[...[...[...[..
   b634c:	5bf1 000b                                   .[..

000b6350 <_ZSt7nothrow>:
   b6350:	5200 4545 544e 6d20 6c61 6f6c 2063 7573     .REENT malloc su
   b6360:	6363 6565 6564 0064 6d2f 746e 772f 726f     cceeded./mnt/wor
   b6370:	736b 6170 6563 772f 726f 736b 6170 6563     kspace/workspace
   b6380:	472f 4343 312d 2d30 6970 6570 696c 656e     /GCC-10-pipeline
   b6390:	6a2f 6e65 696b 736e 472d 4343 312d 2d30     /jenkins-GCC-10-
   b63a0:	6970 6570 696c 656e 342d 5f38 3032 3032     pipeline-48_2020
   b63b0:	3131 3432 315f 3036 3136 3038 3436 2f31     1124_1606180641/
   b63c0:	7273 2f63 656e 6c77 6269 6e2f 7765 696c     src/newlib/newli
   b63d0:	2f62 696c 6362 732f 6474 696c 2f62 6172     b/libc/stdlib/ra
   b63e0:	646e 632e                                    nd.c.

000b63e5 <link_const_variable_data_end>:
   b63e5:	00          	.byte	0x00
	...

000b63e8 <link_constructors_location>:
   b63e8:	000b42cd 	.word	0x000b42cd
   b63ec:	000b4d01 	.word	0x000b4d01
   b63f0:	000b4e95 	.word	0x000b4e95
   b63f4:	000b5039 	.word	0x000b5039
   b63f8:	000b5111 	.word	0x000b5111
   b63fc:	000b5121 	.word	0x000b5121
   b6400:	000b513d 	.word	0x000b513d
   b6404:	000b5b65 	.word	0x000b5b65
   b6408:	000b5cc9 	.word	0x000b5cc9

000b640c <link_constructors_end>:
   b640c:	00000000 	.word	0x00000000
